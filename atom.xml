<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>bitbrain</title>
    <link rel="self" type="application/atom+xml" href="https://bitbra.in/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://bitbra.in"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-10-23T12:00:00+00:00</updated>
    <id>https://bitbra.in/atom.xml</id>
    <entry xml:lang="en">
        <title>Godot Types: The Good, The Bad, The Ugly</title>
        <published>2025-10-23T12:00:00+00:00</published>
        <updated>2025-10-23T12:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bitbra.in/blog/godot-types/"/>
        <id>https://bitbra.in/blog/godot-types/</id>
        
        <content type="html" xml:base="https://bitbra.in/blog/godot-types/">&lt;p&gt;I have seen a lot of confusion about how types work in &lt;a href=&quot;https:&#x2F;&#x2F;godotengine.org&quot;&gt;Godot Engine&lt;&#x2F;a&gt;. Specifically, the difference between &lt;a href=&quot;https:&#x2F;&#x2F;docs.godotengine.org&#x2F;en&#x2F;stable&#x2F;classes&#x2F;class_refcounted.html&quot;&gt;RefCounted&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;docs.godotengine.org&#x2F;en&#x2F;stable&#x2F;classes&#x2F;class_object.html#class-object&quot;&gt;Object&lt;&#x2F;a&gt; and built-in types like &lt;a href=&quot;https:&#x2F;&#x2F;docs.godotengine.org&#x2F;en&#x2F;stable&#x2F;classes&#x2F;class_string.html&quot;&gt;String&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;docs.godotengine.org&#x2F;en&#x2F;stable&#x2F;classes&#x2F;class_color.html&quot;&gt;Color&lt;&#x2F;a&gt;. At the end of this post, you will understand the exact differences between them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;clint-eastwood.webp&quot; alt=&quot;clint-eastwood&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-good-refcounted-and-built-in-types&quot;&gt;The Good: RefCounted and Built-in Types&lt;&#x2F;h1&gt;
&lt;p&gt;Many types in Godot such as &lt;a href=&quot;https:&#x2F;&#x2F;docs.godotengine.org&#x2F;en&#x2F;stable&#x2F;classes&#x2F;class_astar3d.html#class-astar3d&quot;&gt;AStar3D&lt;&#x2F;a&gt; are of type &lt;a href=&quot;https:&#x2F;&#x2F;docs.godotengine.org&#x2F;en&#x2F;stable&#x2F;classes&#x2F;class_refcounted.html#class-refcounted&quot;&gt;RefCounted&lt;&#x2F;a&gt;. Godot will keep track of how many references you have for a given instance. If the reference count becomes 0, the instance will be freed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;extends&lt;&#x2F;span&gt;&lt;span&gt; Node
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;fun_with_refs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;my_ref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; AStar3D.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# AStar3D is of type RefCounted
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_ready&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;fun_with_refs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# the AStar3D instance will be gone! Nothing is referencing it!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This can be extremely handy: you don&#x27;t actually have to worry about freeing objects or any sort of memory management. Godot will take care of it automatically. Prefer &lt;code&gt;RefCounted&lt;&#x2F;code&gt; if you don&#x27;t want to worry about freeing instances and you have mostly short-lived objects anyways.&lt;&#x2F;p&gt;
&lt;p&gt;For in-built types like &lt;code&gt;Color&lt;&#x2F;code&gt; or &lt;code&gt;String&lt;&#x2F;code&gt;, Godot utilizes &lt;strong&gt;value semantics&lt;&#x2F;strong&gt;, this means that when you assign a color or string, it will create always an independent copy.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;Vector2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# Vector2 is an inbuilt-type
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; a
&lt;&#x2F;span&gt;&lt;span&gt;b.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;99
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# (5, 10)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# (99, 10)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;the-bad-object&quot;&gt;The Bad: Object&lt;&#x2F;h1&gt;
&lt;p&gt;Well... not really bad. Just bad for beginners. &lt;code&gt;Object&lt;&#x2F;code&gt; type can bite you if you don&#x27;t actually understand how it works! Godot will &lt;strong&gt;not&lt;&#x2F;strong&gt; free objects for you. When you are not careful, it can lead to a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Memory_leak&quot;&gt;memory leak&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;extends&lt;&#x2F;span&gt;&lt;span&gt; Node
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;memory_leak&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Node.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# Node is of type Object
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_ready&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;memory_leak&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# oops, memory for the node instance is still reserved!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order to free &lt;code&gt;Object&lt;&#x2F;code&gt; you have to call &lt;code&gt;.free()&lt;&#x2F;code&gt; on it. You are in luck, though: most &lt;code&gt;Object&lt;&#x2F;code&gt; instances that Godot creates (like nodes) it will free for you! So while technically, &lt;code&gt;Object&lt;&#x2F;code&gt; requires manual memory management, Godot will do a lot for you. However, when rolling your own &lt;code&gt;Object&lt;&#x2F;code&gt; types you need to be careful!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-ugly-invisible-side-effects&quot;&gt;The Ugly: Invisible Side-Effects&lt;&#x2F;h1&gt;
&lt;p&gt;I have been recently contributing again to the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;utopia-rise&#x2F;fmod-gdextension&quot;&gt;FMOD GDExtension&lt;&#x2F;a&gt; by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;utopia-rise&quot;&gt;utopia-rise&lt;&#x2F;a&gt; because I was trying to investigate an issue in my game where no sound was playing. I won&#x27;t go into too much technical detail here, but &lt;a href=&quot;https:&#x2F;&#x2F;www.fmod.com&#x2F;&quot;&gt;FMOD&lt;&#x2F;a&gt; basically is an audo engine that I am using for &lt;a href=&quot;https:&#x2F;&#x2F;bitbrain.itch.io&#x2F;cave&quot;&gt;my game&lt;&#x2F;a&gt;. FMOD has the concept of &quot;audio banks&quot; that you gotta load at runtime, and those banks contain the audio to play. The code usually looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# init.gd autoload script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;extends&lt;&#x2F;span&gt;&lt;span&gt; Node
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    FmodServer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;load_bank&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;res:&#x2F;&#x2F;fmod&#x2F;main.bank&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span&gt; FmodServer.FMOD_STUDIO_LOAD_BANK_NORMAL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This used to work fine but at some point, it stopped working. After a long time of debugging, it turned out that the signature of &lt;code&gt;load_bank&lt;&#x2F;code&gt; had been changed. &lt;code&gt;FmodBank&lt;&#x2F;code&gt; no longer was of type &lt;code&gt;Object&lt;&#x2F;code&gt; but of type &lt;code&gt;RefCounted&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;worried-kermit.webp&quot; alt=&quot;worried-kermit&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you have paid attention before, you should already know what the problem is: the GDExtension correctly loads the &lt;code&gt;main.bank&lt;&#x2F;code&gt; file into memory but we are actually not referencing it! Godot will then go ahead and free the instance again (because it is a &lt;code&gt;RefCounted&lt;&#x2F;code&gt; and its reference count reaches &lt;code&gt;0&lt;&#x2F;code&gt;). So the correct fix is this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# init.gd autoload script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;extends&lt;&#x2F;span&gt;&lt;span&gt; Node
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;banks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; []
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    banks.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;FmodServer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;load_bank&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;res:&#x2F;&#x2F;fmod&#x2F;main.bank&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span&gt; FmodServer.FMOD_STUDIO_LOAD_BANK_NORMAL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;since &lt;code&gt;banks&lt;&#x2F;code&gt; itself is a reference that will stay around as long the &lt;code&gt;init.gd&lt;&#x2F;code&gt; autoload is around (for the entire duration of the game&#x27;s runtime). We are saved!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;confusion-about-valid-instances&quot;&gt;Confusion about valid instances&lt;&#x2F;h1&gt;
&lt;p&gt;Before we finish, I wanted to say a few more words about &lt;a href=&quot;https:&#x2F;&#x2F;docs.godotengine.org&#x2F;en&#x2F;stable&#x2F;classes&#x2F;class_%40globalscope.html#class-globalscope-method-is-instance-valid&quot;&gt;is_instance_valid&lt;&#x2F;a&gt;. Code like this may seem confusing at first:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;my_color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;is_instance_valid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;my_color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# returns false
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;but this is intended behaviour: &lt;code&gt;Color&lt;&#x2F;code&gt; is an in-built type and won&#x27;t have an &lt;strong&gt;instance id&lt;&#x2F;strong&gt;. &lt;code&gt;is_instance_valid&lt;&#x2F;code&gt; only operates on &lt;strong&gt;instance ids&lt;&#x2F;strong&gt; so Godot cannot know if it is valid or not -&amp;gt; it will always be &lt;code&gt;false&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I hope this was somewhat useful. If you have follow up questions, you can always reach me on 🐘&lt;a href=&quot;https:&#x2F;&#x2F;mastodon.gamedev.place&#x2F;@bitbraindev&quot;&gt;Mastodon&lt;&#x2F;a&gt; or over at ⛅&lt;a href=&quot;https:&#x2F;&#x2F;bsky.app&#x2F;profile&#x2F;bitbra.in&quot;&gt;BlueSky&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Useful gdscript patterns</title>
        <published>2025-08-09T12:00:00+00:00</published>
        <updated>2025-08-09T12:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bitbra.in/blog/useful-gdscript-patterns/"/>
        <id>https://bitbra.in/blog/useful-gdscript-patterns/</id>
        
        <content type="html" xml:base="https://bitbra.in/blog/useful-gdscript-patterns/">&lt;p&gt;On &lt;a href=&quot;https:&#x2F;&#x2F;youtube.com&#x2F;@bitbraindev&quot;&gt;my gamedev journey&lt;&#x2F;a&gt; I have found some specific patterns quite useful when working with &lt;a href=&quot;https:&#x2F;&#x2F;gdscript.com&quot;&gt;GDScript&lt;&#x2F;a&gt;. In this post, I&#x27;d like to show you some of them (Godot 4) and maybe you can make use of it, too.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;combine-setters-with-signals&quot;&gt;Combine setters with signals&lt;&#x2F;h1&gt;
&lt;p&gt;You might find yourself wanting to do something in case a specific variable changes. Now, you could check it either every &lt;code&gt;_tick()&lt;&#x2F;code&gt; or keep track of places where you might change the variable but a much better way is using a setter:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;signal &lt;&#x2F;span&gt;&lt;span&gt;direction_changed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;new_direction&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;Vector2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;onready var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;direction&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;Vector2&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      direction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; v
&lt;&#x2F;span&gt;&lt;span&gt;      direction_changed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;emit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This then allows anybody outside of that component to react to variable changes by simply connecting to the signal:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_ready&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;   player.direction_changed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;_player_direction_changed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_player_direction_changed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;direction&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;Vector2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;pass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# do something here
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This can be extremely powerful to separate your &lt;strong&gt;concerns&lt;&#x2F;strong&gt; and &lt;strong&gt;responsibilities&lt;&#x2F;strong&gt;. Often, we tent to combine everything inside a single node&#x2F;script but this makes it more difficult to reuse things across the board.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;reusable-configurations&quot;&gt;Reusable configurations&lt;&#x2F;h1&gt;
&lt;p&gt;One challenge is to define configuration for your game. You want to tweak for example the color of your player. This can be done via simple &lt;code&gt;@export&lt;&#x2F;code&gt; variable:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;export var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;player_color&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;Color
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and a corresponding color picker will show up in the Godot UI. However, there are cases where you want to make these configurations &lt;em&gt;reusable&lt;&#x2F;em&gt;. For example, in my game I have a procedural cave generation system where I can control the kinds of ores that should spawn and how they should spawn. I could hardcode this into some form of &quot;cavegen&quot; script but what if I want to reuse certain ore spawns for different caves? How do I &quot;remember&quot; the configuration without having to duplicate nodes? Resources are the answer:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span&gt;class_name OreSpawn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;extends&lt;&#x2F;span&gt;&lt;span&gt; Resource
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;export var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;ore&lt;&#x2F;span&gt;&lt;span&gt;:OreItem
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;export var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;noise&lt;&#x2F;span&gt;&lt;span&gt;:FastNoiseLite &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; FastNoiseLite.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;export_range&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;lower_threshold&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;0.0
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;export_range&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;upper_threshold&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;0.0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;is_spawnable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;seed_number&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; ore &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; noise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;	noise.seed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; seed_number
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; noise.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;get_noise_2d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; lower_threshold &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; upper_threshold
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This pattern then allows me to accept a list of possible ore spawns in my cave generator like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;export var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;spawns&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span&gt;[OreSpawn]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The generator basically won&#x27;t care about how the spawn is configured. All it needs to do is call the &lt;code&gt;is_spawnable&lt;&#x2F;code&gt; function for a given seed and x&#x2F;y position to determine what should be spawned where.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;torch-flickering&quot;&gt;Torch flickering&lt;&#x2F;h1&gt;
&lt;p&gt;One challenge I found for my game is to make torches flicker. There is a &lt;a href=&quot;https:&#x2F;&#x2F;docs.godotengine.org&#x2F;en&#x2F;stable&#x2F;classes&#x2F;class_light2d.html&quot;&gt;Light2D&lt;&#x2F;a&gt; those &lt;code&gt;energy&lt;&#x2F;code&gt; I modified over time like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;onready var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;light&lt;&#x2F;span&gt;&lt;span&gt;:Light2D
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;0.0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;delta&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;   light.energy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_calculate_energy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;   time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; delta
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_calculate_energy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;0.8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;+((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;sin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)+(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;cos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;sin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Do not ask me how I came up with this abomination of a calculation! It took many hours of tweaking and adjustments. Well, until I realised that this is a silly approach and there is a &lt;strong&gt;much better&lt;&#x2F;strong&gt; solution by utilizing &lt;a href=&quot;https:&#x2F;&#x2F;docs.godotengine.org&#x2F;en&#x2F;stable&#x2F;classes&#x2F;class_fastnoiselite.html&quot;&gt;FastNoiseLite&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;onready var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;light&lt;&#x2F;span&gt;&lt;span&gt;:Light2D
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;export var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;noise&lt;&#x2F;span&gt;&lt;span&gt;:FastNoiseLite &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; FastNoiseLite.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;0.0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;delta&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;   light.energy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_calculate_energy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;   time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; delta
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_calculate_energy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; flicker_noise.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;get_noise_1d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The way it works is that we can basically &quot;scroll&quot; from left to right over an infinite noise texture and the current value of the noise texture dictates the intensity of the light. This makes the torch flickering much more smooth and hyper-consistent.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;day-night-cycle-2d&quot;&gt;Day &amp;amp; Night cycle (2D)&lt;&#x2F;h1&gt;
&lt;p&gt;A cheap trick to do a day&amp;amp;night cycle is by using &lt;a href=&quot;https:&#x2F;&#x2F;docs.godotengine.org&#x2F;en&#x2F;stable&#x2F;classes&#x2F;class_canvasmodulate.html&quot;&gt;CanvasModulate&lt;&#x2F;a&gt; and working with &lt;code&gt;lerp&lt;&#x2F;code&gt; on &lt;a href=&quot;https:&#x2F;&#x2F;docs.godotengine.org&#x2F;en&#x2F;stable&#x2F;classes&#x2F;class_color.html&quot;&gt;Color&lt;&#x2F;a&gt; class:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;extends&lt;&#x2F;span&gt;&lt;span&gt; CanvasModulate
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;NIGHT_COLOR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;#091d3a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;DAY_COLOR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;#ffffff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;EVENING_COLOR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;#ff3300&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;TIME_SCALE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;0.1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;delta&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	self.time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; delta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; TIME_SCALE
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;sin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;	self.color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;get_source_colour&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;lerp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;get_target_colour&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, value)
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;get_source_colour&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; NIGHT_COLOR.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;lerp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;EVENING_COLOR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;get_target_colour&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; EVENING_COLOR.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;lerp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;DAY_COLOR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code interpolates the modulate color smoothly between the day, night and evening color. Modifying colors at runtime via &lt;code&gt;lerp&lt;&#x2F;code&gt; is rather powerful!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;inner-classes&quot;&gt;Inner classes&lt;&#x2F;h1&gt;
&lt;p&gt;Classes in gdscript can be quite powerful and make your life much easier. Often, you see classes mentioned together with &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Inheritance_(object-oriented_programming)&quot;&gt;inheritance&lt;&#x2F;a&gt; but this is not at all what this is about. I&#x27;d rather discourage inheritance as much as possible (I rarely ever use it).
Instead, classes can help you to make your code more organized and readable. Let me show you.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s say you have to store some information about your game state. You might utilise a dictionary for that:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;waves&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;Vector2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;		 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;slime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;hp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;	]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;waves&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;waves&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While this can work, it is very difficult to understand at a glance what e.g. &lt;code&gt;data[&quot;waves&quot;][0]&lt;&#x2F;code&gt; contains. Yes, with the recent addition of types to dictionaries and arrays, gdscript can tell us the type, but the type itself will be just another dictionary. You end up in a jungle of dictionaries and arrays and it becomes much more difficult to wrap your head around things, especially when you need to debug an issue.&lt;&#x2F;p&gt;
&lt;p&gt;Classes come to the rescue and they can make things much more readable and organized:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e8447e;&quot;&gt;Spawn&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span&gt; :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;Vector2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e8447e;&quot;&gt;Enemy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt; :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;hp&lt;&#x2F;span&gt;&lt;span&gt; :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e8447e;&quot;&gt;Wave&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span&gt; :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Spawn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span&gt; :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Enemy.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;wave &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Wave.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;wave.spawn.pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;Vector2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;wave.enemy.type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;slime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;wave.enemy.hp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;wave.spawn.pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;wave.enemy.type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The beauty of this is that these classes are purely internal to your script and do not need to be exposed. There is also no inheritance or any other complex concept. This pattern uses classes purely as &lt;strong&gt;named data container&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;unique-ids&quot;&gt;Unique ids&lt;&#x2F;h1&gt;
&lt;p&gt;Sometimes, you might need unique ids. Using a counter could work but it brings its own problems: it is &lt;strong&gt;state dependent&lt;&#x2F;strong&gt; and therefore you need to &quot;remember&quot; the counter somehow. There are various algorithms that generate a random strings, such as the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Universally_unique_identifier&quot;&gt;UUID spec&lt;&#x2F;a&gt; however, in gdscript you can create something much simpler: &lt;a href=&quot;https:&#x2F;&#x2F;alex7kom.github.io&#x2F;nano-nanoid-cc&#x2F;&quot;&gt;Nano ID&lt;&#x2F;a&gt;. I am using this exact script in my RPG data management plugin called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;pandora&quot;&gt;Pandora&lt;&#x2F;a&gt; to generate entity ids:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# nanoid.gd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;extends&lt;&#x2F;span&gt;&lt;span&gt; RefCounted
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;ALPHABET&lt;&#x2F;span&gt;&lt;span&gt; :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;DEFAULT_LENGTH&lt;&#x2F;span&gt;&lt;span&gt; :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;21
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;default_length&lt;&#x2F;span&gt;&lt;span&gt; :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; DEFAULT_LENGTH
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt; := &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;DEFAULT_LENGTH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	default_length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; length
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;generate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt; := &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;default_length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;		id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; ALPHABET[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;randi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;() %&lt;&#x2F;span&gt;&lt;span&gt; ALPHABET.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; id
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then you can use it as such:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;NanoID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;preload&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;nanoid.gd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;NanoID.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;generate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I hope you found these somewhat useful. Rock and stone! 💎⛏️&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Goodbye, Jekyll.</title>
        <published>2025-08-07T18:00:00+00:00</published>
        <updated>2025-08-07T18:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bitbra.in/blog/goodbye-jekyll/"/>
        <id>https://bitbra.in/blog/goodbye-jekyll/</id>
        
        <content type="html" xml:base="https://bitbra.in/blog/goodbye-jekyll/">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jekyllrb.com&quot;&gt;Jekyll&lt;&#x2F;a&gt; is a &lt;a href=&quot;https:&#x2F;&#x2F;www.ruby-lang.org&quot;&gt;Ruby&lt;&#x2F;a&gt; based static site generator created by &lt;strong&gt;Github&lt;&#x2F;strong&gt; that I have been using for many many years. It pains me to say goodbye but today is the day where I moved my blog off Jekyll for good. It was a fun ride and most notably, I created &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;jekyll-dash&quot;&gt;jekyll-dash&lt;&#x2F;a&gt;, a custom theme for Jekyll that had all the fancy features one would love to see from an SSG generator: tags, fontawesome, cool animations... and all that jazz. I did maintain that for many years but eventually, the fun turned into annoyance.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;too-many-caveats&quot;&gt;Too many caveats&lt;&#x2F;h1&gt;
&lt;p&gt;Working with Jekyll can be rather annoying, especially when trying to get it running on Github Pages. Yes, Github automatically deploys your Jekyll page without you having to worry about anything, &lt;strong&gt;unless&lt;&#x2F;strong&gt; you are trying to use anything &lt;a href=&quot;https:&#x2F;&#x2F;pages.github.com&#x2F;versions&quot;&gt;other than these versions&lt;&#x2F;a&gt;. Oh, you want to use Jekyll 4? Tough luck, you gotta roll your own workflow to deploy + build things.&lt;&#x2F;p&gt;
&lt;p&gt;To make matters worse, you cannot just &quot;install&quot; Jekyll and get started. You need to setup Ruby first, which &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;ruby&#x2F;comments&#x2F;wovmt1&#x2F;difference_between_ruby_2_and_ruby_3&quot;&gt;itself has different versions&lt;&#x2F;a&gt;, should you install Ruby 2? Should you install Ruby 3? &lt;a href=&quot;https:&#x2F;&#x2F;talk.jekyllrb.com&#x2F;t&#x2F;incompatible-with-the-current-version-ruby-3-0&#x2F;5821&quot;&gt;People in the past stumbled on issues&lt;&#x2F;a&gt; where using Ruby 3 did not work with Jekyll.&lt;&#x2F;p&gt;
&lt;p&gt;Then, there is the &lt;a href=&quot;https:&#x2F;&#x2F;rubygems.org&#x2F;&quot;&gt;gem system&lt;&#x2F;a&gt;: this is not a Jekyll concept but comes from Ruby. The idea sounds neat: you can build a theme for Ruby and then bundle it into a &quot;gem&quot;. Then, you can publish the gem and others can download it and use your Jekyll theme, without having to worry about checking out dubious git repositories or running some dodgy commands. Instead, in your &lt;code&gt;Gemfile&lt;&#x2F;code&gt; you can define dependencies like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gemfile&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gemfile &quot;&gt;&lt;code class=&quot;language-gemfile&quot; data-lang=&quot;gemfile&quot;&gt;&lt;span&gt;source &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;https:&#x2F;&#x2F;rubygems.org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;gem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;jekyll-dash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;~&amp;gt; 2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;gem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;jekyll-sass-converter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;~&amp;gt; 2.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;gem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;liquid-md5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;gem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;jekyll-tagging&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;jekyll-dash&lt;&#x2F;code&gt; there is my own theme I created. You may notice something, though: it has a &lt;code&gt;~&amp;gt; 2&lt;&#x2F;code&gt;, meaning that the version is 2.0—no, this is not because it is so advanced! I wanted to upgrade my blog to latest Jekyll features (Jekyll 4) and unfortunately, &lt;strong&gt;all jekyll gems&lt;&#x2F;strong&gt; stopped working and had to be upgraded, too. This was quite a pain to maintain and keeping track of which gems I can use under which circumstances made this whole setup rather cumbersome. The whole point of using Static Site Generation to me is to have a &lt;em&gt;clean&lt;&#x2F;em&gt; and &lt;em&gt;elegant&lt;&#x2F;em&gt; and &lt;em&gt;minimal&lt;&#x2F;em&gt; setup without any databases, without any annoyances. Just some files hosted in a repository and Bob&#x27;s your uncle.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;zola&quot;&gt;Zola!&lt;&#x2F;h1&gt;
&lt;p&gt;I went and researched what is trendy in 2025 and discovered some interesting alternatives:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gohugo.io&quot;&gt;Hugo&lt;&#x2F;a&gt; seemed great but it is quite advanced and not a great fit for super-minimal blog setups&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;getpublii.com&#x2F;&quot;&gt;Publii&lt;&#x2F;a&gt; is another interesting approach to SSG. It seems very minimal and light-weight but again, too &quot;enterprisey&quot; for my liking. I NEED LESS!&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt; surprised me. It reminded me of the &quot;good old days&quot; and it seems to be &lt;em&gt;extremely&lt;&#x2F;em&gt; light-weight, &lt;strong&gt;and&lt;&#x2F;strong&gt; built in &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I browsed their themes and was impressed. The &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;themes&#x2F;boring&#x2F;&quot;&gt;boring theme&lt;&#x2F;a&gt; was &lt;strong&gt;exactly&lt;&#x2F;strong&gt; what I was looking for. Also, the way it works is rather brilliant: you just use a binary to generate the page and that&#x27;s it. Heck, it even comes with its own Github action!&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m excited to use this light-weight technology.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Godot File Compression</title>
        <published>2024-07-10T10:00:00+00:00</published>
        <updated>2024-07-10T10:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bitbra.in/blog/godot-file-compression/"/>
        <id>https://bitbra.in/blog/godot-file-compression/</id>
        
        <content type="html" xml:base="https://bitbra.in/blog/godot-file-compression/">&lt;p&gt;I am maintaining a &lt;a href=&quot;https:&#x2F;&#x2F;godotengine.org&quot;&gt;Godot Engine&lt;&#x2F;a&gt; addon called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;pandora&quot;&gt;Pandora&lt;&#x2F;a&gt; and maintainers reported a very strange bug that I solved in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;pandora&#x2F;pull&#x2F;185&quot;&gt;this pull request&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;The compression of the &lt;code&gt;data.pandora&lt;&#x2F;code&gt; file was not working and in this blog article I want to explain how compression in Godot works, how I solved it and maybe you can learn a thing or two!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;pandora&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;pandora-logo.svg&quot; alt=&quot;pandora-logo&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;why-compression&quot;&gt;Why compression?&lt;&#x2F;h1&gt;
&lt;p&gt;Compression is by no means a way to encrypt your data. Someone with malicious intent &lt;strong&gt;can&lt;&#x2F;strong&gt; decompress the contents and modify it to their needs. However, compression is still useful to reduce the size of the final &lt;code&gt;.pck&lt;&#x2F;code&gt; file that gets shipped with your Godot game. Also, as an added bonus, it will be much harder for someone without technical knowledge to modify e.g. raw json files.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;storing-json&quot;&gt;Storing JSON&lt;&#x2F;h1&gt;
&lt;p&gt;Imagine you have some json like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;Golden Axe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and you want to store that to a file. Usually, in Godot you can do this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; FileAccess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;item.json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;,&lt;&#x2F;span&gt;&lt;span&gt; FileAccess.WRITE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This then allows you to write to the file our item like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;Dictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= { &lt;&#x2F;span&gt;&lt;span&gt;item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;Golden Axe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot; }
&lt;&#x2F;span&gt;&lt;span&gt;file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;store_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;JSON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;stringify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;storing-compressed-files&quot;&gt;Storing compressed files&lt;&#x2F;h1&gt;
&lt;p&gt;So far, so good. Now, how would we actually store compressed files? The code looks surprisingly similar!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; FileAccess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;open_compressed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;item.json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;,&lt;&#x2F;span&gt;&lt;span&gt; FileAccess.WRITE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;Dictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= { &lt;&#x2F;span&gt;&lt;span&gt;item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;Golden Axe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot; }
&lt;&#x2F;span&gt;&lt;span&gt;file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;store_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;JSON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;stringify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, what is the problem here if this code works fine? It has to do with exporting your game in Godot!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;exporting-addon-files&quot;&gt;Exporting addon files&lt;&#x2F;h1&gt;
&lt;p&gt;When someone uses a Godot addon that relies on specific files (such as &lt;code&gt;data.pandora&lt;&#x2F;code&gt; files for storing state), those files will &lt;strong&gt;not&lt;&#x2F;strong&gt; be automatically exported.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pandora does not use a &lt;code&gt;.json&lt;&#x2F;code&gt; but rather &lt;code&gt;.pandora&lt;&#x2F;code&gt; extension on purpose to discourage people from modifying it manually.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;When exporting the game, one would need to define the exported files explicitly in the export settings:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;godot-export.webp&quot; alt=&quot;godot-export&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;However, this is not sustainable and having to remember to register random files whenever you want to export your game does not scale. This is why Godot introduced the &lt;code&gt;EditorExportPlugin&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;tool
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;extends&lt;&#x2F;span&gt;&lt;span&gt; EditorPlugin
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_enter_tree&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;add_export_plugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;MyExportPlugin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e8447e;&quot;&gt;MyExportPlugin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;extends&lt;&#x2F;span&gt;&lt;span&gt; EditorExportPlugin:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_export_begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;features&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;PackedStringArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;is_debug&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# add_file(&amp;quot;some-file.json&amp;quot;, data, false)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_get_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;MyExportPlugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, this plugin gets shipped with the addon and it allows the addon creator to specify additional files that should be auto-exported when someone uses the addon. In Pandora, the &lt;code&gt;data.pandora&lt;&#x2F;code&gt; file should not be compressed by default when being used in the editor but only for &lt;strong&gt;release builds&lt;&#x2F;strong&gt;. Reason being is that it is much more friendly for version control systems like &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&quot;&gt;git&lt;&#x2F;a&gt; and it also makes debugging things easier within Pandora itself.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;is_debug&lt;&#x2F;code&gt; flag tells us if someone intents to export a game as debug or release build, so we can use the flag to conditionally add the file.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: the &lt;code&gt;path&lt;&#x2F;code&gt; argument of the &lt;code&gt;_export_begin&lt;&#x2F;code&gt; method is the path where the game will be exported to.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The &lt;code&gt;add_file&lt;&#x2F;code&gt; signature requires a &lt;code&gt;PackedByteArray&lt;&#x2F;code&gt; as a 2nd argument, which effectively is the bytes of the file that should be stored away:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#090a0c;color:#dae4ed;&quot;&gt;&lt;code&gt;&lt;span&gt;func _export_begin(features: PackedStringArray, is_debug: bool, path: String, flags: int):
&lt;&#x2F;span&gt;&lt;span&gt;    var pandora_path = &amp;quot;res:&#x2F;&#x2F;data.pandora&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    # open the uncompressed normal file from the project folder
&lt;&#x2F;span&gt;&lt;span&gt;    var file = FileAccess.open(pandora_path, FileAccess.READ)
&lt;&#x2F;span&gt;&lt;span&gt;    # let&amp;#39;s get the bytes from the file
&lt;&#x2F;span&gt;&lt;span&gt;    var data:PackedByteArray = file.get_buffer(file.get_length())
&lt;&#x2F;span&gt;&lt;span&gt;    add_file(pandora_path, data, false)
&lt;&#x2F;span&gt;&lt;span&gt;    # always remember to close the file
&lt;&#x2F;span&gt;&lt;span&gt;    file.close()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;so, how do we store the file compressed? We cannot use &lt;code&gt;open_compressed&lt;&#x2F;code&gt; here because the file we are trying to store compressed is uncompressed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;pandora_path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;res:&#x2F;&#x2F;data.pandora&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# This will fail! `data.pandora` file is not compressed!
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; FileAccess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;open_compressed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;pandora_path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; FileAccess.READ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A first idea I had was to &lt;a href=&quot;https:&#x2F;&#x2F;docs.godotengine.org&#x2F;en&#x2F;stable&#x2F;classes&#x2F;class_packedbytearray.html#class-packedbytearray-method-compress&quot;&gt;compress&lt;&#x2F;a&gt; the &lt;code&gt;PackedByteArray&lt;&#x2F;code&gt; itself:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#090a0c;color:#dae4ed;&quot;&gt;&lt;code&gt;&lt;span&gt;var data:PackedByteArray = file.get_buffer(file.get_length())
&lt;&#x2F;span&gt;&lt;span&gt;add_file(pandora_path, data.compress(), false)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;the assumption is that the exported file can be opened like this when running your &lt;strong&gt;release&lt;&#x2F;strong&gt; build of your game at runtime:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#090a0c;color:#dae4ed;&quot;&gt;&lt;code&gt;&lt;span&gt;var data = FileAccess.open_compressed(&amp;quot;res:&#x2F;&#x2F;data.pandora&amp;quot;, FileAccess.READ)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, that fails with error code &lt;code&gt;15&lt;&#x2F;code&gt;. What on earth is that error? I highly recommend bookmarking the &lt;a href=&quot;https:&#x2F;&#x2F;docs.godotengine.org&quot;&gt;official Godot docs&lt;&#x2F;a&gt;, because they are extremely useful, especially for situations like this: we find our answer in the ancient archives under the &lt;code&gt;Error&lt;&#x2F;code&gt; section (&lt;a href=&quot;https:&#x2F;&#x2F;docs.godotengine.org&#x2F;en&#x2F;stable&#x2F;classes&#x2F;class_%40globalscope.html#enum-globalscope-error&quot;&gt;link&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Error ERR_FILE_UNRECOGNIZED = 15&lt;&#x2F;p&gt;
&lt;p&gt;File: Unrecognized error.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Ah, so Godot itself does not recognize the file as compressed!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;solving-the-mystery&quot;&gt;Solving the mystery&lt;&#x2F;h1&gt;
&lt;p&gt;I reached out on the official &lt;strong&gt;Godot Contributor chat&lt;&#x2F;strong&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;chat.godotengine.org&#x2F;channel&#x2F;editor?msg=n8yvre5oNTSg8n4Rg&quot;&gt;contributor bruvzg kindly provided me&lt;&#x2F;a&gt; with this information:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;[...] you can replicate compressed file format if you want it to be readable with open_compressed, it&#x27;s not complex, the mine difference compressing is done in blocks, format is:&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#090a0c;color:#dae4ed;&quot;&gt;&lt;code&gt;&lt;span&gt;magic
&lt;&#x2F;span&gt;&lt;span&gt;    char[4] &amp;quot;GCPF&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;header
&lt;&#x2F;span&gt;&lt;span&gt;    uint32_t compression_mode (Compression::MODE_ZSTD by default)
&lt;&#x2F;span&gt;&lt;span&gt;    uint32_t block_size (4096 by default)
&lt;&#x2F;span&gt;&lt;span&gt;    uint32_t uncompressed_size
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;block compressed sizes, number of blocks = (uncompressed_size &#x2F; block_size) + 1
&lt;&#x2F;span&gt;&lt;span&gt;    uint32_t block_sizes[]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;followed by compressed block data, same as calling `compress` for each source `block_size`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In case you are confused now, stay with me - this all will make sense in a bit. The format you are seeing there is &lt;strong&gt;not code&lt;&#x2F;strong&gt; but it describes &lt;strong&gt;bytes&lt;&#x2F;strong&gt; that need to be present in the compressed file for Godot to understand it. Picture it like a recipe or instruction manual that is stored at the beginning of your file and Godot will read that to understand what to do with your compressed content.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-are-bytes-anyway&quot;&gt;What are bytes anyway?&lt;&#x2F;h1&gt;
&lt;p&gt;To decompress for a bit (pun intended), let us take a step back and understand how our exported file actually looks like. Remember, we previously attempted to export our file like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;:PackedByteArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;get_buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;get_length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;add_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;pandora_path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;compress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can use a nifty tool like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DmitriySalnikov&#x2F;GodotPCKExplorer&quot;&gt;GodotPCKExplorer&lt;&#x2F;a&gt; to inspect + unpack exported Godot builds. This becomes especially useful to investigate the export logic of our &lt;code&gt;EditorExportPlugin&lt;&#x2F;code&gt;. Opening the &lt;code&gt;pck&lt;&#x2F;code&gt; file to our exported &lt;strong&gt;release&lt;&#x2F;strong&gt; build of our game indeed shows the file:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;godot-pck-explorer.webp&quot; alt=&quot;godot-pck-explorer&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We then can click &lt;code&gt;Extract &amp;gt; Extract Selected&lt;&#x2F;code&gt; and save the file to a location of our choice. This then allows us to inspect the file furter. Opening that file in a text editor shows us an odd character:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#090a0c;color:#dae4ed;&quot;&gt;&lt;code&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;item&amp;quot;: &amp;quot;Golden Pickaxe&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is because the file is compressed - there is a much better way at looking at the file itself, which is by using a hex editor, such as &lt;a href=&quot;https:&#x2F;&#x2F;hexed.it&#x2F;&quot;&gt;hexed.it&lt;&#x2F;a&gt;:
&lt;img src=&quot;&#x2F;images&#x2F;data-pandora-bytes.webp&quot; alt=&quot;data-pandora-bytes&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;code&gt;char&lt;&#x2F;code&gt; is precisely 1 byte, and looking at our compression spec again, Godot expects the first 4 bytes to consist of the following characters: &lt;code&gt;GCPF&lt;&#x2F;code&gt;, which would look like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#090a0c;color:#dae4ed;&quot;&gt;&lt;code&gt;&lt;span&gt;47 43 50 46
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In case a file does not start with these exact bytes, Godot will not be able to open it correctly. The same goes for the next byte headers: &lt;code&gt;uint32_t&lt;&#x2F;code&gt; is precisely 4 bytes, meaning the next 12 bytes should contain the &lt;code&gt;compression_mode&lt;&#x2F;code&gt;, &lt;code&gt;block_size&lt;&#x2F;code&gt; and &lt;code&gt;uncompressed_size&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#090a0c;color:#dae4ed;&quot;&gt;&lt;code&gt;&lt;span&gt;47 43 50 46 00 00 00 00 00 10 00 00 1E 00 00 00
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;00 00 00 00&lt;&#x2F;code&gt; is the compression mode - we pick the default which is MODE_ZSTD (0)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;00 10 00 00&lt;&#x2F;code&gt; represents 4096 as the block size&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;1E 00 00 00&lt;&#x2F;code&gt; is the uncompressed size of our file = 30 bytes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The remaining bytes will be the compressed data that gets produced by compressing our &lt;code&gt;PackedByteArray&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;applying-the-knowledge&quot;&gt;Applying the knowledge&lt;&#x2F;h1&gt;
&lt;p&gt;With our gained knowledge, let us create a new script that is able to compress any text into Godot compatible &lt;code&gt;PackedByteArray&lt;&#x2F;code&gt; format!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# The block size which we hardcode
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;BLOCK_SIZE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;4096
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# Godot Compression magic keyword
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;MAGIC &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;GCPF&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;## magic
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;##     char[4] &amp;quot;GCPF&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;##
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;## header
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;##     uint32_t compression_mode (Compression::MODE_ZSTD by default)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;##     uint32_t block_size (4096 by default)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;##     uint32_t uncompressed_size
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;##
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;## block compressed sizes, number of blocks = (uncompressed_size &#x2F; block_size) + 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;##     uint32_t block_sizes[]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;##
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;## followed by compressed block data, same as calling `compress` for each source `block_size`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;static func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;compress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;compression_mode&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;FileAccess&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;CompressionMode&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;FileAccess&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;COMPRESSION_FASTLZ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;PackedByteArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_encode_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;uncompressed_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;num_blocks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;ceil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;uncompressed_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) &#x2F;&lt;&#x2F;span&gt;&lt;span&gt; BLOCK_SIZE))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;buffer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;PackedByteArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	buffer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;append_array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_encode_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;MAGIC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	buffer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;append_array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_encode_uint32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;compression_mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	buffer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;append_array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_encode_uint32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;BLOCK_SIZE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	buffer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;append_array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_encode_uint32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;uncompressed_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;block_sizes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;PackedByteArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;compressed_blocks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; []
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;num_blocks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; BLOCK_SIZE
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;end &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) *&lt;&#x2F;span&gt;&lt;span&gt; BLOCK_SIZE, uncompressed_size)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;block_data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;PackedByteArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;block_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; start
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; block_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; end:
&lt;&#x2F;span&gt;&lt;span&gt;			block_data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;data[block_index]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;			block_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;compressed_block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; block_data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;compress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;compression_mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		block_sizes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;append_array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_encode_uint32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;compressed_block.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;		compressed_blocks.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;compressed_block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	buffer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;append_array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;block_sizes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; compressed_blocks:
&lt;&#x2F;span&gt;&lt;span&gt;		buffer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;append_array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; buffer
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# Godot is Little Endian by default, so the order here is crucial!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;static func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_encode_uint32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;PackedByteArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;PackedByteArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	arr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;0xFF&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	arr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;0xFF&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	arr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;0xFF&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	arr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;24&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;0xFF&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; arr
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;static func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_encode_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;PackedByteArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;PackedByteArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; value:
&lt;&#x2F;span&gt;&lt;span&gt;		arr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;append_array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;char.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;to_ascii_buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; arr
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this component, we can now easily adjust our previous code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gd&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gd &quot;&gt;&lt;code class=&quot;language-gd&quot; data-lang=&quot;gd&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;Compression &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;preload&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;compression.gd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;_export_begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;features&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;PackedStringArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;is_debug&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;pandora_path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;res:&#x2F;&#x2F;data.pandora&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# open the uncompressed normal file from the project folder
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; FileAccess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;pandora_path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; FileAccess.READ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;get_as_text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# compress the file into the correct format so Godot can load it again
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;compressed&lt;&#x2F;span&gt;&lt;span&gt;:PackedByteArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Compression.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;compress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;add_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;pandora_path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; compressed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With the above trick, you can now open the file via &lt;code&gt;open_compressed&lt;&#x2F;code&gt; without problems!&lt;&#x2F;p&gt;
&lt;p&gt;I hope you enjoyed this little sneakpeak into the development of my addon. Feel free to checkout &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;pandora&quot;&gt;pandora&lt;&#x2F;a&gt; for yourself. I also have &lt;a href=&quot;https:&#x2F;&#x2F;youtube.com&#x2F;@bitbraindev&quot;&gt;a Youtube channel&lt;&#x2F;a&gt; where I document my gamedev journey - check it out!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Godot Version Compatibility: A Guide for Addon Developers</title>
        <published>2023-09-03T10:00:00+00:00</published>
        <updated>2023-09-03T10:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bitbra.in/blog/godot-addon-compatibility/"/>
        <id>https://bitbra.in/blog/godot-addon-compatibility/</id>
        
        <content type="html" xml:base="https://bitbra.in/blog/godot-addon-compatibility/">&lt;p&gt;&lt;strong&gt;Godot addons offer a powerful way to extend the engine&#x27;s functionality without having to modify its core.&lt;&#x2F;strong&gt; This flexibility empowers the community to create custom solutions without burdening the engine itself. However, as addon developers, we must strike a balance between compatibility and functionality. This article explores the trade-offs involved, focusing primarily on Godot Engine 4.x.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-anatomy-of-a-godot-release&quot;&gt;The Anatomy of a Godot Release&lt;&#x2F;h2&gt;
&lt;p&gt;Godot currently has two &lt;strong&gt;major&lt;&#x2F;strong&gt; versions in circulation:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Godot 3.x&lt;&#x2F;strong&gt;: This older version is known for its stability and backward compatibility. It&#x27;s particularly useful for projects that require lighter hardware capabilities, such as mobile games.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Godot 4.x&lt;&#x2F;strong&gt;: This is the newer, more advanced version, boasting superior graphics capabilities through Vulkan and significant reworks of various systems.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Each major version consists of &lt;strong&gt;minor&lt;&#x2F;strong&gt; versions (e.g., Godot 4.0, 4.1, etc.) that mainly introduce new features and bug fixes. These are followed by &lt;strong&gt;maintenance&lt;&#x2F;strong&gt; versions (e.g., 4.0.1, 4.1.2) focusing on bug fixes, compatibility improvements, and minor UX enhancements. Typically, maintenance releases are non-API-breaking.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;crafting-a-compatibility-matrix&quot;&gt;Crafting a Compatibility Matrix&lt;&#x2F;h2&gt;
&lt;p&gt;When developing addons, it&#x27;s crucial to consider which Godot features you&#x27;ll be using from the outset. Suppose you have an addon compatible with all minor versions of Godot 4.x. Your initial compatibility matrix might look like this:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Godot Version&lt;&#x2F;th&gt;&lt;th&gt;Addon Version&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;4.0.x&lt;&#x2F;td&gt;&lt;td&gt;1.0.x&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4.1.x&lt;&#x2F;td&gt;&lt;td&gt;1.0.x&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Let&#x27;s say Godot 4.1 introduces a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;godotengine&#x2F;godot&#x2F;pull&#x2F;76264&quot;&gt;new feature&lt;&#x2F;a&gt; called &lt;strong&gt;static variables&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gdscript&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-gdscript &quot;&gt;&lt;code class=&quot;language-gdscript&quot; data-lang=&quot;gdscript&quot;&gt;&lt;span&gt;class_name CustomClass extends RefCounted
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# shared between instances of this class
&lt;&#x2F;span&gt;&lt;span&gt;static var my_var:int
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using this feature would make your addon incompatible with Godot 4.0.x. You now have three options:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;option-1-maintain-support-for-godot-4-0&quot;&gt;Option 1: Maintain Support for Godot 4.0&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;✅ Maximum flexibility&lt;br &#x2F;&gt;
⛔️ High administrative overhead&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Godot Version&lt;&#x2F;th&gt;&lt;th&gt;Addon Version&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;4.0.x&lt;&#x2F;td&gt;&lt;td&gt;1.0.x&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4.1.x&lt;&#x2F;td&gt;&lt;td&gt;1.1.x&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;You could maintain a separate &lt;code&gt;1.0&lt;&#x2F;code&gt; branch for Godot 4.0.x compatibility, cherry-picking bug fixes as needed. This approach increases administrative overhead, especially if you&#x27;re using Continuous Integration.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;option-2-drop-support-for-godot-4-0&quot;&gt;Option 2: Drop Support for Godot 4.0&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;✅ Access to all new features&lt;br &#x2F;&gt;
⛔️ Risk of alienating some users&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Godot Version&lt;&#x2F;th&gt;&lt;th&gt;Addon Version&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;4.1.x&lt;&#x2F;td&gt;&lt;td&gt;1.1.x&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;By dropping support for older versions, you can fully utilize the new features but may lose users who are still on Godot 4.0.x.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;option-3-maintain-broad-compatibility&quot;&gt;Option 3: Maintain Broad Compatibility&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;✅ Broad user base&lt;br &#x2F;&gt;
⛔️ Limited access to new features&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Godot Version&lt;&#x2F;th&gt;&lt;th&gt;Addon Version&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;4.x&lt;&#x2F;td&gt;&lt;td&gt;1.x&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;This approach minimizes administrative work but restricts you from using newer features.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;which-option-to-pick&quot;&gt;Which Option to Pick?&lt;&#x2F;h2&gt;
&lt;p&gt;The best approach depends on various factors:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;User Base&lt;&#x2F;strong&gt;: Check &lt;a href=&quot;https:&#x2F;&#x2F;godotengine.github.io&#x2F;issue-stats&#x2F;&quot;&gt;issue stats&lt;&#x2F;a&gt; to gauge the popularity of different Godot versions.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Feature Importance&lt;&#x2F;strong&gt;: Assess how critical new Godot features are for your addon&#x27;s functionality.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Administrative Overhead&lt;&#x2F;strong&gt;: Be realistic about the time and effort you can invest in maintaining multiple branches.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Backporting&lt;&#x2F;strong&gt;: Consider whether a feature could be backported to older versions, especially if it&#x27;s a game-changer.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;supporting-godot-3-x&quot;&gt;Supporting Godot 3.x&lt;&#x2F;h2&gt;
&lt;p&gt;If you wish to support both Godot 3 and 4, you can maintain separate branches for each. For example, my addon &lt;a href=&quot;https:&#x2F;&#x2F;bitbra.in&#x2F;beehave&#x2F;#&#x2F;?id=%f0%9f%93%a6-installation&quot;&gt;beehave&lt;&#x2F;a&gt; has two branches: &lt;strong&gt;godot-4.x&lt;&#x2F;strong&gt; and &lt;strong&gt;godot-3.x&lt;&#x2F;strong&gt;, each tailored to its respective Godot version.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Workflow of releasing a gem-based Jekyll theme</title>
        <published>2021-10-05T10:00:00+00:00</published>
        <updated>2021-10-05T10:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bitbra.in/blog/workflow-of-releasing-gem-based-jekyll-theme/"/>
        <id>https://bitbra.in/blog/workflow-of-releasing-gem-based-jekyll-theme/</id>
        
        <content type="html" xml:base="https://bitbra.in/blog/workflow-of-releasing-gem-based-jekyll-theme/">&lt;p&gt;This &lt;a href=&quot;https:&#x2F;&#x2F;jekyllrb.com&#x2F;&quot;&gt;Jekyll&lt;&#x2F;a&gt;-based blog has been built with a custom theme created called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;jekyll-dash&quot;&gt;jekyll-dash&lt;&#x2F;a&gt;. Initially, I built this theme just to share it with others, however, more and more people started using it over the past few months.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;jekyll-dash&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;jekyll-dash-logo.webp&quot; alt=&quot;jekyll-dash-logo&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In this article I want to highlight some of the challenges I faced trying to maintain this theme for a lot of people and the workflow I introduced that helped me to overcome these challenges.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;an-auto-update-theme&quot;&gt;An &quot;auto-update&quot; theme&lt;&#x2F;h1&gt;
&lt;p&gt;When I first started this theme I found it quite annoying that I constantly had to manually update my Jekyll files such as layouts, Sass and pages to apply a change to my blog. Especially, when trying to keep the theme in its &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;jekyll-dash&quot;&gt;own dedicated repository&lt;&#x2F;a&gt; this can become a demanding chore.&lt;&#x2F;p&gt;
&lt;p&gt;The solution to this was to bundle my theme as a so called &lt;a href=&quot;https:&#x2F;&#x2F;rubygems.org&#x2F;&quot;&gt;Ruby gem&lt;&#x2F;a&gt; and then use that gem within the &lt;code&gt;_config.yml&lt;&#x2F;code&gt; of Jekyll:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;theme&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;jekyll-dash
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Jekyll will automatically apply the theme if it is specified as a gem within &lt;code&gt;Gemfile&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#090a0c;color:#dae4ed;&quot;&gt;&lt;code&gt;&lt;span&gt;gem &amp;#39;jekyll-dash&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Whenever I push a new version of the gem to the public rubygems repository, rebuilding my site would use the new changes and automatically include them - neat!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;limitations-of-github-pages&quot;&gt;Limitations of Github Pages&lt;&#x2F;h1&gt;
&lt;p&gt;Unfortunately, I quickly had to realise that a lot of people were unable to use my theme natively within Github pages. Github are actually the creators behind Jekyll and when you create a repository containing Jekyll files, it will automatically build them for you and publish them &lt;a href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;pages&#x2F;getting-started-with-github-pages&#x2F;creating-a-github-pages-site&quot;&gt;when the Github pages feature is enabled&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There was just one problem: &lt;a href=&quot;https:&#x2F;&#x2F;pages.github.com&#x2F;versions&#x2F;&quot;&gt;Github pages did not support Jekyll 4.x&lt;&#x2F;a&gt; at the moment of this writing but only Jekyll 3.x. This becomes a problem because my theme was natively built with Jekyll 4.&lt;&#x2F;p&gt;
&lt;p&gt;Therefore, I had to introduce a multi-version workflow:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;version &lt;code&gt;1.x&lt;&#x2F;code&gt; will support Jekyll 3&lt;&#x2F;li&gt;
&lt;li&gt;version &lt;code&gt;2.x&lt;&#x2F;code&gt; will support Jekyll 4&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I created separate branches for those and specified the Jekyll version explicitly within the &lt;code&gt;.gemspec&lt;&#x2F;code&gt; file of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;jekyll-dash&#x2F;blob&#x2F;main&#x2F;jekyll-dash.gemspec&quot;&gt;jekyll-dash&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#090a0c;color:#dae4ed;&quot;&gt;&lt;code&gt;&lt;span&gt;spec.add_runtime_dependency &amp;quot;jekyll&amp;quot;, &amp;quot;~&amp;gt; 4.0&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This worked very well for my usecase and I was able to use the theme natively in Github pages.&lt;&#x2F;p&gt;
&lt;p&gt;For what reason would I want to use Jekyll outside of the native Github pages integration then? Well, due to security reasons, Github Pages does only allow a very specific set of Jekyll plugins to be enabled. This restricts customisation of the site. For example, I also needed the following features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;gravatar support&lt;&#x2F;li&gt;
&lt;li&gt;auto-generated tags and tag cloud&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The solution was to build the site externally outside of Github Pages but then push the generated site &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;bitbrain.github.io&quot;&gt;onto a Github Pages enabled repository&lt;&#x2F;a&gt;. I achieved that by using &lt;a href=&quot;https:&#x2F;&#x2F;travis-ci.org&#x2F;&quot;&gt;travis-ci.org&lt;&#x2F;a&gt; which became eventually difficult to manage. As a result, I left Travis behind and moved over to &lt;a href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;actions&quot;&gt;Github Actions&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;improving-the-workflow&quot;&gt;Improving the workflow&lt;&#x2F;h1&gt;
&lt;p&gt;My initial release workflow looked as follows:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;push a new commit to the &lt;code&gt;main&lt;&#x2F;code&gt; branch containing the updated version within the &lt;code&gt;.gemspec&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;push a new tag for the given commit&lt;&#x2F;li&gt;
&lt;li&gt;release the gem (see script below)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;before_install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;gem install bundler -v 2.0.1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;bundle install
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;deploy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;provider&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;rubygems
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;api_key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;$RUBYGEMS_API_KEY
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;gem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;jekyll-dash
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;repo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;bitbrain&#x2F;jekyll-dash
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There were a couple of issues with this approach:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the pipeline ran outside of Github while Github support Github Actions out-of-the-box&lt;&#x2F;li&gt;
&lt;li&gt;unable to see what each release entails, as Github releases and git tags were not created for a new release&lt;&#x2F;li&gt;
&lt;li&gt;difficult to manage multiple major versions, as this pipeline would always deploy what the tag said. I had to be very careful to not cause unecessary merge conflicts&lt;&#x2F;li&gt;
&lt;li&gt;individual commits were not really built and tested. Especially for people trying to make contributions it was difficult to tell if their change would break the Jekyll build&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I discarded this workflow and introduced a completely new one built from scratch based on &lt;strong&gt;Github Actions&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Build jekyll site for each individual commit and report on its status code&lt;&#x2F;li&gt;
&lt;li&gt;When committing to the branches &lt;code&gt;main&lt;&#x2F;code&gt; (v2.x) and &lt;code&gt;1.x&lt;&#x2F;code&gt; (v1.x) respectively, do the following:
&lt;ul&gt;
&lt;li&gt;extract the current gem version from the .gemspec file &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;gemspec-fetch&quot;&gt;with a custom-built Github action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;check git history if a tag for the extracted gem version exists already&lt;&#x2F;li&gt;
&lt;li&gt;in case the tag does not exist yet, create a new git tag and push a new Github release&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Whenever a new tag has been pushed, build and publish the gem for that tag to rubygems.org&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;jekyll-dash-build-tag.webp&quot; alt=&quot;jekyll-dash-build&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In order to check that the gem version exists as a tag, I am using the &lt;code&gt;github-tag-action&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;💎 Extract gemspec info
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;gemspec_fetch
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;bitbrain&#x2F;gemspec-fetch@1.0.0
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;specfile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;jekyll-dash.gemspec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;🕵️‍♂️ investigate if tag exists
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;mukunku&#x2F;tag-exists-action@v1.0.0
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;tag-check
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: {&lt;&#x2F;span&gt;&lt;span&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;raw %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;v${{ steps.gemspec_fetch.outputs.version }}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;{&lt;&#x2F;span&gt;&lt;span&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;endraw %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;GITHUB_TOKEN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: {&lt;&#x2F;span&gt;&lt;span&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;raw %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;${{ secrets.GH_CREDENTIALS }}{% endraw %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This allows me then to apply an &lt;code&gt;if&lt;&#x2F;code&gt; conditional on any other steps:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;🔖Build tag
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: {&lt;&#x2F;span&gt;&lt;span&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;raw %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;${{ steps.tag-check.outputs.exists == &amp;#39;false&amp;#39; }}{% endraw %}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;tag_version
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;mathieudutour&#x2F;github-tag-action@v5.6
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;github_token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: {&lt;&#x2F;span&gt;&lt;span&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;raw %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;${{ secrets.GH_CREDENTIALS }}{% endraw %}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;default_bump&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;custom_tag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:  {&lt;&#x2F;span&gt;&lt;span&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;raw %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;${{ steps.gemspec_fetch.outputs.version }}{% endraw %}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;tag_prefix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;v
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The slightly tricky part was to extract the version from the .gemspec file. For that I build &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;gemspec-fetch&quot;&gt;my own Github Action&lt;&#x2F;a&gt; that is using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;packsaddle&#x2F;ruby-parse_gemspec-cli&quot;&gt;parse-gemspec-cli&lt;&#x2F;a&gt; to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;gemspec-fetch&#x2F;blob&#x2F;main&#x2F;entrypoint.sh&quot;&gt;extract the metadata accordingly&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;SPEC_DATA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;parse-gemspec-cli &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;INPUT_SPECFILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;::set-output name=name::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;SPEC_DATA &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;jq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;.name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;)&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;::set-output name=description::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;SPEC_DATA &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;jq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;.description&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;)&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;::set-output name=summary::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;SPEC_DATA &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;jq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;.summary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;)&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;::set-output name=version::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;SPEC_DATA &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;jq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;.version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;)&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;::set-output name=homepage::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;SPEC_DATA &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;jq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;.homepage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;)&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This new workflow allows me to build and test every single commit and it gives me full control of when I want to release a new gem: I simply bump the version of the gem manually within the .gemspec and Github will do the rest for me!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Host your own blog with Jekyll and Github Pages</title>
        <published>2021-10-03T10:00:00+00:00</published>
        <updated>2021-10-03T10:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bitbra.in/blog/host-your-own-blog-for-free-with-custom-domain/"/>
        <id>https://bitbra.in/blog/host-your-own-blog-for-free-with-custom-domain/</id>
        
        <content type="html" xml:base="https://bitbra.in/blog/host-your-own-blog-for-free-with-custom-domain/">&lt;p&gt;Github allows you to host your own websites via &lt;a href=&quot;https:&#x2F;&#x2F;pages.github.com&#x2F;&quot;&gt;Github Pages&lt;&#x2F;a&gt;. With a tool called &lt;a href=&quot;https:&#x2F;&#x2F;jekyllrb.com&#x2F;&quot;&gt;Jekyll&lt;&#x2F;a&gt; you are able to create pages for your website written in &lt;a href=&quot;https:&#x2F;&#x2F;www.markdownguide.org&#x2F;basic-syntax&#x2F;&quot;&gt;Markdown&lt;&#x2F;a&gt;. Let us explore how we can set up our own blog hosted on Github Pages. Additionally, let us configure a custom domain for our website! This very blog is hosted exactly that way!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;make sure that &lt;a href=&quot;https:&#x2F;&#x2F;jekyllrb.com&#x2F;docs&#x2F;installation&#x2F;&quot;&gt;Jekyll is installed&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;make sure that &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;book&#x2F;en&#x2F;v2&#x2F;Getting-Started-Installing-Git&quot;&gt;git is installed&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;make sure that you &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;join&quot;&gt;have a Github account&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;1-repository-setup&quot;&gt;1. Repository setup&lt;&#x2F;h2&gt;
&lt;p&gt;Create a new repository in Github that follows the following naming convention and initialise it with a &lt;code&gt;main&lt;&#x2F;code&gt; branch:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#090a0c;color:#dae4ed;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;your-username&amp;gt;.github.io
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This repository will host both our source files (Jekyll) and will also contain a branch that contains the generated files for Github pages. Once checked out locally, let us create a custom orphan branch like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; checkout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;orphan&lt;&#x2F;span&gt;&lt;span&gt; gh-pages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;allow-empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;initial commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot; \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span&gt; origin gh-pages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; checkout main
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then head into &lt;code&gt;Settings-&amp;gt;Pages&lt;&#x2F;code&gt; of your repository in Github and set your source branch of Github pages:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;set-source-branch.webp&quot; alt=&quot;set-source-branch&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This will ensure that Github looks up any content on that branch and serves it automatically at the following url:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#090a0c;color:#dae4ed;&quot;&gt;&lt;code&gt;&lt;span&gt;https:&#x2F;&#x2F;&amp;lt;your-username&amp;gt;.github.io
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;2-jekyll-setup&quot;&gt;2. Jekyll setup&lt;&#x2F;h2&gt;
&lt;p&gt;Next up, let us configure Jekyll on the &lt;code&gt;main&lt;&#x2F;code&gt; branch. Keep in mind that &lt;code&gt;main&lt;&#x2F;code&gt; has a different git history to &lt;code&gt;gh-pages&lt;&#x2F;code&gt;. We will not directly commit anything to &lt;code&gt;gh-pages&lt;&#x2F;code&gt; - instead, we host all the Jekyll files on the &lt;code&gt;main&lt;&#x2F;code&gt; branch only and let the Github Action do the rest!&lt;&#x2F;p&gt;
&lt;p&gt;Let us configure Jekyll by generating a new site:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;jekyll&lt;&#x2F;span&gt;&lt;span&gt; new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;skip-bundle&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(optional) build and test the Jekyll site locally:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#090a0c;color:#dae4ed;&quot;&gt;&lt;code&gt;&lt;span&gt;bundle install &amp;amp;&amp;amp; jekyll serve
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then head over to &lt;a href=&quot;http:&#x2F;&#x2F;127.0.0.1:4000&#x2F;&quot;&gt;http:&#x2F;&#x2F;127.0.0.1:4000&lt;&#x2F;a&gt; to view your page locally:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;jekyll-default-page.webp&quot; alt=&quot;jekyll-default-page&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;push your Jekyll site to Github:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#090a0c;color:#dae4ed;&quot;&gt;&lt;code&gt;&lt;span&gt;git add -A \
&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; git commit -am &amp;quot;setup Jekyll blog&amp;quot; \
&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; git push origin main
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;3-github-action&quot;&gt;3. Github Action&lt;&#x2F;h2&gt;
&lt;p&gt;The Jekyll source files are sitting now on the &lt;code&gt;main&lt;&#x2F;code&gt; branch but we want to automatically build our website like we used to do earlier locally. For this we will use a Github action. This action will build our website and then force-push it to the &lt;code&gt;gh-pages&lt;&#x2F;code&gt; branch.&lt;&#x2F;p&gt;
&lt;p&gt;Create a new file under the folder &lt;code&gt;.github&#x2F;workflows&#x2F;github-pages.yml&lt;&#x2F;code&gt;. Github will look for any files hosted in the &lt;code&gt;.github&#x2F;workflows&lt;&#x2F;code&gt; folder and run a so called action. Within that file, define the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;Build and deploy Jekyll site to GitHub Pages
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;branches&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;github-pages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;actions&#x2F;checkout@v2
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;helaili&#x2F;jekyll-action@v2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;${{ secrets.CUSTOM_GITHUB_TOKEN }}
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;target_branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;gh-pages
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This action will automatically take care of building your Jekyll page and pushing it to the &lt;code&gt;gh-pages&lt;&#x2F;code&gt; branch. Before this works we need to define a custom github token, as the default &lt;code&gt;GH_TOKEN&lt;&#x2F;code&gt; will not work within actions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;generate-new-token.webp&quot; alt=&quot;generate-new-token&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Make sure to set this token to never expire and assign the following permissions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;repo&lt;&#x2F;li&gt;
&lt;li&gt;workflow&lt;&#x2F;li&gt;
&lt;li&gt;write:packages (optional)&lt;&#x2F;li&gt;
&lt;li&gt;delete:packages (optional)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ATTENTION!&lt;&#x2F;strong&gt; NEVER reveal any of your tokens or hardcode them into your code. Hackers will use them to compromise your account!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Copy the token that is shown and define a new secret within your repository called &lt;code&gt;CUSTOM_GITHUB_TOKEN&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;custom-github-token.webp&quot; alt=&quot;custom-github-token&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Next, push your changes to your repository:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;Setup workflow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot; \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push origin main
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Within your repository on Github you should now seen a new action getting triggered:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;successful-workflow.webp&quot; alt=&quot;github-action&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4-optional-setup-custom-domain&quot;&gt;4. (optional) Setup custom domain&lt;&#x2F;h2&gt;
&lt;p&gt;Having a long url such as https:&#x2F;&#x2F;bitbrain.github.io works but does not look very good on your CV. You can setup a custom domain like I have: https:&#x2F;&#x2F;bitbra.in this page is hosted on Github Pages but has a custom domain setup.&lt;&#x2F;p&gt;
&lt;p&gt;Create a new file called &lt;code&gt;CNAME&lt;&#x2F;code&gt; that contains your domain, for example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#090a0c;color:#dae4ed;&quot;&gt;&lt;code&gt;&lt;span&gt;bitbra.in
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and commit and push that file. Now, head to &lt;code&gt;Settings-&amp;gt;Pages&lt;&#x2F;code&gt; to setup your domain:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;custom-domain-setup.webp&quot; alt=&quot;custom-domain&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This will only work if you own the domain and you configured your CNAME entry correctly within your domain provider. &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@benwiz&#x2F;how-to-deploy-github-pages-with-aws-route-53-registered-custom-domain-and-force-https-bbea801e5ea3&quot;&gt;Follow this guide&lt;&#x2F;a&gt; to learn how to set up your custom domain within AWS.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Let me know in the comments if you face any issues so I can keep this guide up-to-date! If you want to use &lt;strong&gt;the custom Jekyll theme of this blog&lt;&#x2F;strong&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;jekyll-dash#installation&quot;&gt;feel free to checkout this guide&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Becoming a gamedev Youtuber</title>
        <published>2020-12-29T10:00:00+00:00</published>
        <updated>2020-12-29T10:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bitbra.in/blog/devlog-youtubers/"/>
        <id>https://bitbra.in/blog/devlog-youtubers/</id>
        
        <content type="html" xml:base="https://bitbra.in/blog/devlog-youtubers/">&lt;p&gt;For many years, I remained quiet and built &lt;a href=&quot;https:&#x2F;&#x2F;bitbrain.itch.io&quot;&gt;a lot of little games&lt;&#x2F;a&gt; just for fun. I may have shared progress on them &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;bitbrain_&quot;&gt;on Twitter&lt;&#x2F;a&gt; but that&#x27;s it. To be completely honest, I was afraid people might not like what I am doing or that my work &lt;em&gt;is not good enough&lt;&#x2F;em&gt; for the world to see.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, after years of hiding, I decided this year &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;bitbraindev&quot;&gt;to become a Youtuber&lt;&#x2F;a&gt;! Before I go into details, let me first talk a little bit about Youtube a bit, especially the game development section.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-four-types-of-gamedev-content&quot;&gt;The four types of gamedev content&lt;&#x2F;h1&gt;
&lt;p&gt;Before I became a creator, I used to only watch devlogs myself. I am probably subscribed to over 80 different creators and each of them has their unique strengths. Generally, they can be categorised as follows:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;type-a-the-informative-game-developer&quot;&gt;Type A: The informative Game Developer&lt;&#x2F;h2&gt;
&lt;p&gt;This type focuses purely on sharing knowledge and learnings without wasting anyones time. Entertainment-first is not a priority but rather showing progress. A very good example of this is &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;c&#x2F;Miziziziz&quot;&gt;Miziziziz&lt;&#x2F;a&gt; - he is the master of efficiency when it comes to condensing information within a single video. What also makes him great is that Miziziziz is very knowledgable in the stuff he&#x27;s doing!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;mizizizi.webp&quot; alt=&quot;type-a&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;type-b-the-relaxed-game-developer&quot;&gt;Type B: The relaxed Game Developer&lt;&#x2F;h2&gt;
&lt;p&gt;Sometimes, after a hectic day, you just want to relax and not worry about consuming information as quickly as possible. Rather, you&#x27;d like to watch someone explaining thoroughly their process and how to live a healthy, productive life. One of my favourite Youtubers, &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;c&#x2F;DevDuck&#x2F;videos&quot;&gt;devduck&lt;&#x2F;a&gt;, is a prime-example of this. His editing style is always very relaxed but also kinda melancholic. Watching his videos really motivated me to get up early in the morning (we&#x27;re talking like 5am) to enjoy game development in its fullest.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;devduck1.webp&quot; alt=&quot;type-b&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;type-c-the-entertainer&quot;&gt;Type C: The Entertainer&lt;&#x2F;h2&gt;
&lt;p&gt;You find most devlogs dry and boring and always skip most of it? You prefer watching Twitch streamers for their personality? You like banter and swear just for fun? Then &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;randallthomas&quot;&gt;Randy&lt;&#x2F;a&gt; is your guy! One of my favourite videos is &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=lahpnRVxkU8&quot;&gt;Simulating every single pixel in my game&lt;&#x2F;a&gt;. In that particular episode, Randy shows off various alter-ego characters, each having a particular responsibility. In addition, his Australian accent makes the videos highly enjoyable (if you like that kind of humour).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;randy.webp&quot; alt=&quot;type-c&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;type-d-the-newcomer&quot;&gt;Type D: The Newcomer&lt;&#x2F;h2&gt;
&lt;p&gt;Sometimes it surprises me to see brilliant videos but the creators have less than 1000 subscribers. It amazes me how many awesome creators are out there, and almost nobody watched their videos yet. A few of these newcomers are (in my opinion) on-par with the &quot;big ones&quot; such as &lt;strong&gt;devduck&lt;&#x2F;strong&gt; or &lt;strong&gt;heartbeast&lt;&#x2F;strong&gt;. What makes these creators so unique is their personality, the editing style and the type of content they create. For example &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCHwsuay541hn0rj-Bqvm3WA&#x2F;videos&quot;&gt;Obvious Dev&lt;&#x2F;a&gt; is an aspiring game developer from Germany, working on his game called &lt;strong&gt;Exo Colony&lt;&#x2F;strong&gt;. Like me, he is quite German and we have a severe lack of German game developers on Youtube. Let&#x27;s unite!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;obviousdev.webp&quot; alt=&quot;type-d&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Another great Youtuber is &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCiTOqFuPAIweN5dy7y-xJuQ&#x2F;videos&quot;&gt;Element Mill&lt;&#x2F;a&gt;. I discovered him by accident and &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=oU3hwuV3wyM&quot;&gt;his production value is comparable&lt;&#x2F;a&gt; to a creator with a few million subscribers. Insanity!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;my-youtube-channel&quot;&gt;My Youtube channel&lt;&#x2F;h1&gt;
&lt;p&gt;After I got inspired by all those awesome creators, I decided for myself to join the bunch and become a Youtuber myself. I wanted to produce devlogs, document my workflows and show my struggles and achievements. I bought myself a &lt;a href=&quot;https:&#x2F;&#x2F;www.canon.co.uk&#x2F;cameras&#x2F;eos-m50&#x2F;&quot;&gt;CANON M50&lt;&#x2F;a&gt; and a &lt;a href=&quot;https:&#x2F;&#x2F;www.bluemic.com&#x2F;en-us&#x2F;products&#x2F;yeti&#x2F;&quot;&gt;Blue Yeti Microphone&lt;&#x2F;a&gt; and started filming my first video.&lt;&#x2F;p&gt;
&lt;p&gt;Suddenly I realised: what kind of style do I actually aim for? I really don&#x27;t find myself funny, so probably trying to push for Funny&#x2F;Entertainer content might be not ideal. Then I thought: &lt;strong&gt;Why even trying to fit into a box? Just do whatever!&lt;&#x2F;strong&gt; which is initially very difficult. So, I went ahead and created my first two videos:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Sonkr6vf4Eo&quot;&gt;I build my first crafting game in Godot Engine!&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=XUwLMpPMOL4&quot;&gt;Lighting and inventory update for my Godot crafting game!&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I have received dozens of comments and a lot of feedback. While creating these videos, I tried not to copy any of the previouslu mentioned Youtubers but simply did what I found interesting&#x2F;fun to do. In handsight, I accidentally tried to copy some things from other Youtubers by filling my videos with so called B-Roll (the content between the content). In my last video, I might have even overdone this and lost focus on what I actually wanna do: show insights into my gamedev process.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;bitbrainyt.webp&quot; alt=&quot;bitbrain&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;expectations-vs-reality&quot;&gt;Expectations vs. Reality&lt;&#x2F;h1&gt;
&lt;p&gt;Before I created my first video, I thought it would be rather easy to produce content. When editing for many hours just to create a few minutes of content, I had to learn that it is &lt;strong&gt;very exhausting and challenging&lt;&#x2F;strong&gt; to do this kind of &lt;strong&gt;work&lt;&#x2F;strong&gt;. Another learning was that it can be rather tempting to produce content &lt;strong&gt;for the clicks&lt;&#x2F;strong&gt; rather than just focusing on the content itself. Regardless, I would have never expected to get that many followers in just a few months. Over 300 people have subscribed to my channel already and over 4000 views have accumulated! Thank you for everyone joining my gamedev journey.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-future&quot;&gt;The future&lt;&#x2F;h1&gt;
&lt;p&gt;In 2021, I have big plans for my Youtube channel. Obviously, I will continue my devlog series on &lt;a href=&quot;https:&#x2F;&#x2F;bitbrain.itch.io&#x2F;cave&quot;&gt;cave&lt;&#x2F;a&gt; but also I have plans to do different types of content such as interviews, collaborations and tutorials!&lt;&#x2F;p&gt;
&lt;p&gt;Stay tuned. ♥&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How to publish your Godot Game to itch.io via Github actions</title>
        <published>2020-08-01T10:00:00+00:00</published>
        <updated>2020-08-01T10:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bitbra.in/blog/publish-godot-game-to-itchio/"/>
        <id>https://bitbra.in/blog/publish-godot-game-to-itchio/</id>
        
        <content type="html" xml:base="https://bitbra.in/blog/publish-godot-game-to-itchio/">&lt;p&gt;Manually building and uploading your &lt;a href=&quot;https:&#x2F;&#x2F;godotengine.org&quot;&gt;Godot&lt;&#x2F;a&gt; games can be painful and time-consuming. In this tutorial am going to show you how to automate the process:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;let Github build your game via &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;actions&quot;&gt;Github Actions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Github creates a new release&lt;&#x2F;li&gt;
&lt;li&gt;publish automatically to &lt;a href=&quot;https:&#x2F;&#x2F;itch.io&quot;&gt;itch.io&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;prequisites&quot;&gt;Prequisites&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Github account&lt;&#x2F;li&gt;
&lt;li&gt;itch.io account&lt;&#x2F;li&gt;
&lt;li&gt;published game page on itch.io&lt;&#x2F;li&gt;
&lt;li&gt;a Godot game project pushed to a Github repository&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;initial-setup&quot;&gt;Initial setup&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;setting-up-itch-io&quot;&gt;Setting up itch.io&lt;&#x2F;h2&gt;
&lt;p&gt;In order to make this entire process work, we first have to setup a so called token in itch.io:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;create-new-api-key.webp&quot; alt=&quot;api-key&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setup-secrets-in-github&quot;&gt;Setup secrets in Github&lt;&#x2F;h2&gt;
&lt;p&gt;Next, we are going to set up the secrets within Github. Head over to &lt;code&gt;Account Settings -&amp;gt; Developer settings -&amp;gt; Personal access tokens&lt;&#x2F;code&gt; and generate a new token:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;github-create-token.webp&quot; alt=&quot;gh-token&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You will not be able to see this token again once generated! Save it somewhere locally in a file for later use.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;ATTENTION! Never use keys&#x2F;tokens within your code! Hackers can easily gain access to your account then. Instead, set up Github secrets that you can reference in your scripts.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Next, head to your Github repository configuration page and add secrets:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;github-create-secrets.webp&quot; alt=&quot;gh-secrets&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BUTLER_CREDENTIALS&lt;&#x2F;code&gt; is the value of the itch.io key you previously generated&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GH_CREDENTIALS&lt;&#x2F;code&gt; is the value of your Github token you previously generated&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It is &lt;strong&gt;very&lt;&#x2F;strong&gt; important to use a custom &lt;code&gt;GH_CREDENTIALS&lt;&#x2F;code&gt; within Github actions. Due to a limitation, Github &lt;a href=&quot;https:&#x2F;&#x2F;github.community&#x2F;t&#x2F;workflow-set-for-on-release-not-triggering-not-showing-up&#x2F;16286&#x2F;5&quot;&gt;does not trigger any action&lt;&#x2F;a&gt; when the default &lt;code&gt;GITHUB_TOKEN&lt;&#x2F;code&gt; secret is being used to create releases:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Releases created when authenticating with the GITHUB_TOKEN will prevent new workflows from running.
If you want to run new workflows, you’ll need to set up a different PAT and add that as a secret.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ethomson (Github Staff)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;create-a-export-presets-cfg-file&quot;&gt;Create a export_presets.cfg file&lt;&#x2F;h2&gt;
&lt;p&gt;Within Godot, head over to &lt;code&gt;Project -&amp;gt; Export...&lt;&#x2F;code&gt; and create a new export entry:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;godot-export-project.webp&quot; alt=&quot;godot-export&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Also, make sure to define an export path and give it a name (e.g. &lt;strong&gt;yourgame-windows&lt;&#x2F;strong&gt;). This will be the name of the game file in itch.io. Saving your configuration automatically generates a &lt;code&gt;export_presets.cfg&lt;&#x2F;code&gt; file that you need to commit to your Github repository. Make sure that your &lt;code&gt;.gitignore&lt;&#x2F;code&gt; does not accidentally exclude this file!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;create-github-actions&quot;&gt;Create Github actions&lt;&#x2F;h1&gt;
&lt;p&gt;After you setup the secrets within your repository and pushed your export presets, it is now time to configure the Github actions.&lt;&#x2F;p&gt;
&lt;p&gt;Within the root of your repository, create a new &lt;code&gt;.github&#x2F;workflows&lt;&#x2F;code&gt; directory that will contain all the actions (&lt;code&gt;*.yml&lt;&#x2F;code&gt; files).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;create-release-action&quot;&gt;Create release action&lt;&#x2F;h2&gt;
&lt;p&gt;Create a new file under &lt;code&gt;.github&#x2F;workflows&#x2F;create-release.yml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;branches&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;master
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;export_game&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# Always use ubuntu-latest for this action
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# Job name, can be anything
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;Export game to Github
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# Always include the checkout step so that
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# your project is available for Godot to export
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;checkout
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;actions&#x2F;checkout@v2.3.1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# Ensure that you get the entire project history
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;fetch-depth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;create game release
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# Use latest version (see releases for all versions)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;firebelley&#x2F;godot-export@v2.3.0
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# Defining all the required inputs
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# I used the mono version of Godot in this example
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;godot_executable_download_url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;https:&#x2F;&#x2F;downloads.tuxfamily.org&#x2F;godotengine&#x2F;3.2.2&#x2F;mono&#x2F;Godot_v3.2.2-stable_mono_linux_headless_64.zip
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;godot_export_templates_download_url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;https:&#x2F;&#x2F;downloads.tuxfamily.org&#x2F;godotengine&#x2F;3.2.2&#x2F;mono&#x2F;Godot_v3.2.2-stable_mono_export_templates.tpz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# set this either to . or your game path, e.g. .&#x2F;godot in case
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# your game is within a sub-directory
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;relative_project_path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: .
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;GITHUB_TOKEN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;${% raw %}{{ secrets.GH_CREDENTIALS }}{% endraw %}
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;ACTIONS_ALLOW_UNSECURE_COMMANDS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s have a look into the steps. First, we define when the action should get triggered. If you do not want to create a new release
everytime you push, replace the branch with a different branch, e.g. &lt;code&gt;release&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;branches&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;master
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Afterwards, we use the &lt;code&gt;firebelley&#x2F;godot-export&lt;&#x2F;code&gt; action to build our game. This one requires the &lt;code&gt;export_presets.cfg&lt;&#x2F;code&gt;  to be present in your &lt;code&gt;relative_project_path&lt;&#x2F;code&gt; specified in order to work. Also, it is important to set the environment variable so Github is able to push a new release for us:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;GITHUB_TOKEN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;${% raw %}{{ secrets.GH_CREDENTIALS }}{% endraw %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The versioning will be done automatically for you, however you can also provide additional configuration to the action to control the versioning yourself.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;publish-to-itch-io-action&quot;&gt;Publish to itch.io action&lt;&#x2F;h2&gt;
&lt;p&gt;The following example publishes to Windows only, however you can add additional platform releases as additional jobs. Create a new file under &lt;code&gt;.github&#x2F;workflows&#x2F;publish-to-itchio.yml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;release&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;types&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;published&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;release_windows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;download Windows
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;download-windows
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;dsaltares&#x2F;fetch-gh-release-asset@master
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;yourgame-windows.zip
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;GITHUB_TOKEN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;${% raw %}{{ secrets.GH_CREDENTIALS }}{% endraw %}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;deploy to itch.io (Windows)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;josephbmanley&#x2F;butler-publish-itchio-action@master
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;BUTLER_CREDENTIALS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;${% raw %}{{ secrets.BUTLER_CREDENTIALS }}{% endraw %}
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;CHANNEL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;windows
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;ITCH_GAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;yourgame
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;ITCH_USER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;your itchio account
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;PACKAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;yourgame-windows.zip
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;VERSION&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;${% raw %}{{ steps.download-windows.outputs.version }}{% endraw %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Voila! Now commit and push everything and it should automatically create a release for you:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;github-create-release.webp&quot; alt=&quot;github-release&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After the release is created, Github will automatically trigger the next action to publish your game to itch.io:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;github-export-to-itch.webp&quot; alt=&quot;github-itchio&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Building a game from scratch in 48 hours</title>
        <published>2020-04-08T10:00:00+00:00</published>
        <updated>2020-04-08T10:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bitbra.in/blog/minibeansjam5-building-a-game/"/>
        <id>https://bitbra.in/blog/minibeansjam5-building-a-game/</id>
        
        <content type="html" xml:base="https://bitbra.in/blog/minibeansjam5-building-a-game/">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;itch.io&#x2F;jam&#x2F;minibeansjam5&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;minibeansjam5.webp&quot; alt=&quot;minibeansjam5&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Between Friday 3rd-5th April 2020, German &lt;a href=&quot;https:&#x2F;&#x2F;rocketbeans.tv&#x2F;&quot;&gt;Rocketbeans TV&lt;&#x2F;a&gt; hosted &lt;a href=&quot;https:&#x2F;&#x2F;itch.io&#x2F;jam&#x2F;minibeansjam5&quot;&gt;minibeansjam 5&lt;&#x2F;a&gt;, a 48 hour gamejam. I submitted a game and managed to finish most bits right in time.&lt;&#x2F;p&gt;
&lt;p&gt;The purpose is not to win anything, it&#x27;s more a fun thing to do and it challenges your skills in time management, setting priorities as well as health care. (yes, you &lt;strong&gt;NEED&lt;&#x2F;strong&gt; sleep!)&lt;&#x2F;p&gt;
&lt;h1 id=&quot;preparation&quot;&gt;Preparation&lt;&#x2F;h1&gt;
&lt;p&gt;Personally, I need to be in the right mood to approach something like a gamejam. I am a quite emotional developer and if I feel down or unwell, my creativity kinda stalls. That&#x27;s why I don&#x27;t &lt;em&gt;prepare&lt;&#x2F;em&gt; for gamejams in general. As a general rule though, please consider the following before approaching &lt;strong&gt;any&lt;&#x2F;strong&gt; gamejam:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;gamejams are there to have fun&lt;&#x2F;strong&gt;. Do not stress yourself! I know it can quite daunting at first, however, we&#x27;re all in the same boat. Enjoy it!&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;fix your sleep cycle!&lt;&#x2F;strong&gt; There is nothing worse than a broken sleep cycle. I know, people have their preferred time to stay awake (some people even like to work only during night). This is completely fine. However, make sure you keep it consistent, since otherwise you might oversleep on the last day and miss the deadline.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;stay hydrated!&lt;&#x2F;strong&gt; prepare yourself with your favourite drink (sparkling water or still water is my favourite pick) - this keeps the brain cells active and moist!&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Stay Away From Energy Drinks (SAFED)&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;sharpen your tools&lt;&#x2F;strong&gt; on kick-off day, make sure you have everything already opened, preloaded etc. so you do not have to do it once the themes are announced.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Together is Better!&lt;&#x2F;strong&gt; find people who want to do it with you. I promise you it changes the entire experience.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Interestingly, I purposefully did this game on my own. Initially, I was looking for a team but then I wanted to challenge myself: can I build a game including assets, programming, level design, game design, writing, sound design and music myself in such a short time?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;challenge-accepted-meme.webp&quot; alt=&quot;challenge-accepted&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;picking-a-theme&quot;&gt;Picking a theme&lt;&#x2F;h1&gt;
&lt;p&gt;The theme has been announced around 6pm on Friday:&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot; data-theme=&quot;dark&quot;&gt;&lt;p lang=&quot;de&quot; dir=&quot;ltr&quot;&gt;Der &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;hashtag&#x2F;miniBeansjam5?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#miniBeansjam5&lt;&#x2F;a&gt; Countdown hat begonnen!&lt;br&gt;Hier sind die Begriffe für das &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;hashtag&#x2F;GameJam?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#GameJam&lt;&#x2F;a&gt; Thema!&lt;br&gt;&lt;br&gt;Wählt mindestens 2 der 3 Begriffe: Explosion, Elastisch und&#x2F;oder Jenseits.&lt;br&gt;&lt;br&gt;Die Zeit endet am Sonntag um 19:00 Uhr, also in 48 Stunden!&lt;br&gt;Viel Spaß bei unserem &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;hashtag&#x2F;GameJam?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#GameJam&lt;&#x2F;a&gt;!&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;hashtag&#x2F;gamedev?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#gamedev&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;hashtag&#x2F;rbtv?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#rbtv&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;5Rnw3iR1OM&quot;&gt;pic.twitter.com&#x2F;5Rnw3iR1OM&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&amp;mdash; miniBeansjam (@minibeansjam) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;minibeansjam&#x2F;status&#x2F;1246120117433520131?ref_src=twsrc%5Etfw&quot;&gt;April 3, 2020&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt; &lt;script async src=&quot;https:&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;For my all non-German friends, this basically says to pick one or more of the following themes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Explosion&lt;&#x2F;li&gt;
&lt;li&gt;Elastic&lt;&#x2F;li&gt;
&lt;li&gt;Beyond&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The themes are not super strict but can be interpreted in any way. Their main purpose is to guide your imagination! The first thing I always do is creating &lt;strong&gt;a mindmap&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;mindmap-minibeansjam5.webp&quot; alt=&quot;challenge-accepted&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can use whatever tool you prefer for this, after a quick Google search I found &lt;a href=&quot;https:&#x2F;&#x2F;app.mindmapmaker.org&#x2F;#m:new&quot;&gt;mindmapmaker.org&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I stared at my creation for a couple of minutes until I realised: I want to build a &lt;strong&gt;zombie shooter survival horror&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;setting-up-the-project&quot;&gt;Setting up the project&lt;&#x2F;h1&gt;
&lt;p&gt;The next step for me is to set up a project. Many people also do offline games (like board games) where this obviously is not applicable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;version-control&quot;&gt;Version control&lt;&#x2F;h2&gt;
&lt;p&gt;A version control system (VSC) &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;&quot;&gt;like git&lt;&#x2F;a&gt; helps you to track your changes over time. The idea is that every change you do to your project is stored in the cloud and can be accessed at any given time. For that, I use Github for that:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;shelter&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;shelter-github-screenshot.webp&quot; alt=&quot;shelter-github&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It is important to use a VSC since it can save you a lot of pain. Using something like Dropbox is very difficult once you want to play around with features but you do not have the concept of branches. Also, working with multiple people on the same file can be challenging with something like Dropbox. Version control becomes a &lt;strong&gt;MUST&lt;&#x2F;strong&gt; in bigger teams.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;generating-the-project-files&quot;&gt;Generating the project files&lt;&#x2F;h2&gt;
&lt;p&gt;Next up I generate the project. I build all my games in Java, more specifically with frameworks like &lt;a href=&quot;https:&#x2F;&#x2F;libgdx.badlogicgames.com&#x2F;&quot;&gt;libgdx&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;braingdx&quot;&gt;braingdx&lt;&#x2F;a&gt;. Then I commit the changes to Git and push them to my Github repository:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;shelter&#x2F;commit&#x2F;778eadaff2618b342a05dcd64813310c0f482f9c&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;shelter-initial-commit.webp&quot; alt=&quot;shelter-initial-commit&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Obviously, using when something like &lt;a href=&quot;https:&#x2F;&#x2F;unity.com&#x2F;&quot;&gt;Unity Engine&lt;&#x2F;a&gt;, you&#x27;d push the project files of your Unity project.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;plan-your-time-wisely&quot;&gt;Plan your time wisely&lt;&#x2F;h1&gt;
&lt;p&gt;This is the first critical stage. When I attended my first game jams a couple of years ago, I&#x27;d already rush ahead and implement &lt;strong&gt;features&lt;&#x2F;strong&gt; like health system, fighting, enemies or shooting. Those things are useful and make your game fun, however, now might not be the right time to do this. In my head, it looks a little bit like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;48-gamejam-timeline.webp&quot; alt=&quot;48hour-timeline&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I call this the &lt;strong&gt;Gamejam Flow Pyramid&lt;&#x2F;strong&gt; (excuse my poor MSPaint skills. Also, arrows are now up to scale). The idea is the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Day 1&lt;&#x2F;strong&gt;: working out the core mechanic of your game. After the first day, your game is basically already playable, but most likely is 0 fun since reward systems, UI, assets, etc. are missing. However, &lt;strong&gt;mechanically&lt;&#x2F;strong&gt; the foundation for your game is set.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Day 2&lt;&#x2F;strong&gt;: Powermode! It&#x27;s time to implement all your features, assets and build a basic (functional) UI. At the end of the day, mostly only polishing and nice-to-have features should be left. Also, do not worry about the game loop or menu flow, that&#x27;s all for the last day.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Day 3&lt;&#x2F;strong&gt;: Wrapping it up. Time to finish the game loop, build menu flows (logo screen -&amp;gt; main menu -&amp;gt; ingame -&amp;gt; game over, etc.) . Also try to polish your game as much as possible: add particle effects, screen shake, more animations, etc. and add features you think will make the game more fun.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Obviously, this order is just a suggestion and always works for me the best. Also, for multi-disciplinary teams this order can be moved around or things like assets and levels can be prepared already on Day 1 while developers work on implementing game mechanics. On Day 2 and Day 3, artists, writers and composers can then work on polishing existing stuff or extend the game.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;day-1-the-dancing-man&quot;&gt;Day 1: the dancing man&lt;&#x2F;h1&gt;
&lt;p&gt;After setting up my project, I opened my &lt;a href=&quot;https:&#x2F;&#x2F;pyxeledit.com&quot;&gt;Pyxel Edit&lt;&#x2F;a&gt; to create a simple tileset:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;shelter-tileset.webp&quot; alt=&quot;shelter-tileset&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I added a lot of variation to different grass tiles so the game looks okay when walking over a plain of grass. If you haven&#x27;t seen tile sets like this yet: &lt;a href=&quot;https:&#x2F;&#x2F;doc.mapeditor.org&#x2F;en&#x2F;stable&#x2F;manual&#x2F;using-the-terrain-tool&#x2F;&quot;&gt;Tiled map editor has Terrain support&lt;&#x2F;a&gt; and it makes things so much more easier to build nice-looking maps with the terrain editor:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;shelter-terrain-editor.webp&quot; alt=&quot;shelter-terrain-editor&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Once the terrain has been defined, you can simply draw terrain within tiled:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;shelter-terrain-example.webp&quot; alt=&quot;shelter-terrain-example&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s all I needed for level design right now. Time to work on my core mechanic: the walking soldier. To achieve that, I wanted to do a 2.5-dimensional illusion where you can perceive depth:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2.5d-example.webp&quot; alt=&quot;2.5d-example&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Next up I created the player tileset. In previous games I always used to have WASD movement and four directions. However, that can be very limiting and I wanted the player to move in ANY direction. That&#x27;s why the tileset needs to take diagonal movement into account:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;shelter-player-tileset.webp&quot; alt=&quot;shelter-player-tileset&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Implementing this into the game &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;braingdx&#x2F;wiki&#x2F;animations&quot;&gt;with the animation system of my framework braingdx&lt;&#x2F;a&gt; was straight-forward. Here is the result:&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-theme=&quot;dark&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Implemented movement 🏃‍♀️ and rotation 💃&lt;br&gt;&lt;br&gt;Next up: running animation and weapon system.&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;hashtag&#x2F;gamedev?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#gamedev&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;minibeansjam?ref_src=twsrc%5Etfw&quot;&gt;@minibeansjam&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;tZO43xUzBu&quot;&gt;pic.twitter.com&#x2F;tZO43xUzBu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&amp;mdash; 〽️ɪɢᴜᴇʟ (@bitbrain_) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;bitbrain_&#x2F;status&#x2F;1246172775494176768?ref_src=twsrc%5Etfw&quot;&gt;April 3, 2020&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt; &lt;script async src=&quot;https:&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt; 
&lt;p&gt;Enough for the first day. Time to go to bed! 😴💤&lt;&#x2F;p&gt;
&lt;h1 id=&quot;day-2-zombie-apocalypse&quot;&gt;Day 2: zombie apocalypse&lt;&#x2F;h1&gt;
&lt;p&gt;The second day was about building out the core mechanics such as implementing shooting and zombies:&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-theme=&quot;dark&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Implemented &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;hashtag&#x2F;box2d?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#box2d&lt;&#x2F;a&gt; physics and shadows. Now I can bump into zombies.&lt;br&gt;&lt;br&gt;Now working on the first weapon, shooting &amp;amp; running animations. &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;MKmT2fP4IH&quot;&gt;pic.twitter.com&#x2F;MKmT2fP4IH&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&amp;mdash; 〽️ɪɢᴜᴇʟ (@bitbrain_) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;bitbrain_&#x2F;status&#x2F;1246417958055837701?ref_src=twsrc%5Etfw&quot;&gt;April 4, 2020&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt; &lt;script async src=&quot;https:&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt; 
&lt;p&gt;Making zombies was rather easy: I desaturated the colours of the player texture, painted the skin green and made the eyes red:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;shelter-zombie-tileset.webp&quot; alt=&quot;shelter-player-tileset&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Yes, this means zombies have the same animation as the player, but nobody hopefully notices this! &lt;em&gt;flies away&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-theme=&quot;dark&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Shooting in action.&lt;br&gt;&lt;br&gt;Next up: making zombies aggressive and more animations.&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;hashtag&#x2F;minibeansjam5?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#minibeansjam5&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;minibeansjam?ref_src=twsrc%5Etfw&quot;&gt;@minibeansjam&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;TicPbc33EI&quot;&gt;pic.twitter.com&#x2F;TicPbc33EI&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&amp;mdash; 〽️ɪɢᴜᴇʟ (@bitbrain_) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;bitbrain_&#x2F;status&#x2F;1246500096042205185?ref_src=twsrc%5Etfw&quot;&gt;April 4, 2020&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt; &lt;script async src=&quot;https:&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt; 
&lt;p&gt;After implementing shooting zombies and a health system, it was time to do something entirely different: composing a soundtrack. Since I wanted to save time and I was all on my own, I had to do a few design decisions before composing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the track should be repeatable without noticing and should not become boring&lt;&#x2F;li&gt;
&lt;li&gt;the track should be rather ambient based&lt;&#x2F;li&gt;
&lt;li&gt;the game is action-based but I wanted to keep it horror, so it should not have any percussion work&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I spun up my Ableton and came up with this:&lt;&#x2F;p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https:&#x2F;&#x2F;w.soundcloud.com&#x2F;player&#x2F;?url=https%3A&#x2F;&#x2F;api.soundcloud.com&#x2F;tracks&#x2F;791093143&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;I added tons of base and reverb to give a sense of loneliness. Also notice those weird tones towards the end? That&#x27;s me just randomly punching my MIDI keyboard.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;day-3-taking-shelter&quot;&gt;Day 3: taking shelter&lt;&#x2F;h1&gt;
&lt;p&gt;On the last day I recorded various sound effects myself:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;zombie sounds&lt;&#x2F;strong&gt; by moaning into the microphone and pitching it&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;footstep sounds&lt;&#x2F;strong&gt; by shaking my leather jacket&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;shot impact sounds&lt;&#x2F;strong&gt; by squishing a wet towel&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;door sounds&lt;&#x2F;strong&gt; by opening and closing one of our old doors and adding reverb&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Also, there are more sound effects I downloaded from the internet since it was rather difficult to record them myself:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;death sound&lt;&#x2F;li&gt;
&lt;li&gt;explosion sound&lt;&#x2F;li&gt;
&lt;li&gt;reload sound&lt;&#x2F;li&gt;
&lt;li&gt;weapon shoot sound&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;last-words&quot;&gt;Last words&lt;&#x2F;h1&gt;
&lt;p&gt;That&#x27;s how I built the game. Obviously, there was much more stuff done on the code front. Checkout this video to see all the code I wrote during this project:&lt;&#x2F;p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;dbCTbEMASB8&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;I just want to thank the other participants &lt;a href=&quot;https:&#x2F;&#x2F;itch.io&#x2F;jam&#x2F;minibeansjam5&#x2F;entries&quot;&gt;for their amazing games&lt;&#x2F;a&gt; (I played them all!) and also give special thanks to &lt;a href=&quot;https:&#x2F;&#x2F;rocketbeans.tv&#x2F;bohnen&#x2F;65&#x2F;Dmitrij&quot;&gt;Dima (Dmitrij Chotin)&lt;&#x2F;a&gt; for organising this great event. Hey, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;retrodima&quot;&gt;follow him on Twitter&lt;&#x2F;a&gt;! He built an amazing game, too.&lt;&#x2F;p&gt;
&lt;p&gt;Oh! I almost forgot! You can play the game here:&lt;&#x2F;p&gt;
&lt;iframe src=&quot;https:&#x2F;&#x2F;itch.io&#x2F;embed&#x2F;603286?border_width=0&amp;amp;dark=true&quot; width=&quot;550&quot; height=&quot;165&quot; frameborder=&quot;0&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bitbrain.itch.io&#x2F;shelter&quot;&gt;shelter by bitbrain&lt;&#x2F;a&gt;&lt;&#x2F;iframe&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Creating braingdx: orthogonal tilemaps</title>
        <published>2019-07-08T10:00:00+00:00</published>
        <updated>2019-07-08T10:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bitbra.in/blog/creating-braingdx-orthogonal-tilemaps/"/>
        <id>https://bitbra.in/blog/creating-braingdx-orthogonal-tilemaps/</id>
        
        <content type="html" xml:base="https://bitbra.in/blog/creating-braingdx-orthogonal-tilemaps/">&lt;p&gt;Welcome to my new blog series where I talk in more detail about a personal project of mine called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;braingdx&quot;&gt;braingdx&lt;&#x2F;a&gt;. It builds upon &lt;a href=&quot;https:&#x2F;&#x2F;libgdx.badlogicgames.com&quot;&gt;libgdx&lt;&#x2F;a&gt; and extends it &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;braingdx#features&quot;&gt;with game engine features&lt;&#x2F;a&gt; to avoid writing boilerplate-code.&lt;&#x2F;p&gt;
&lt;p&gt;In this part I will present how the tiledmap integration works in &lt;strong&gt;braingdx&lt;&#x2F;strong&gt; compared to &lt;strong&gt;libgdx&lt;&#x2F;strong&gt; itself. As mentioned before, this framework uses &lt;strong&gt;libgdx&lt;&#x2F;strong&gt; and its APIs in order to integrate tiled maps.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-extending-already-existing-tiledmap-support&quot;&gt;Why extending already existing tiledmap support?&lt;&#x2F;h2&gt;
&lt;p&gt;Before I started writing my own framework, I would use something like this to get tiledmaps drawn onto screen:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;&#x2F;* somewhere in your create() method *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;camera &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;OrthographicCamera&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;camera&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;setToOrtho&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;Gdx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;graphics&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;getWidth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span&gt;Gdx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;graphics&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;getHeight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;camera&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tiledMap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;TmxMapLoader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;orthogonal-map.tmx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tiledMapRenderer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;OrthogonalTiledMapRenderer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;tiledMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;&#x2F;* somewhere in your render() method *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;camera&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;tiledMapRenderer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;setView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;camera&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;tiledMapRenderer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will render your multi-layered map onto the screen. Job is done then. Or  is it? Before I even started thinking about writing a tiledmap integration, I had to know the challenges ahead of me. I realised that using a simple &lt;code&gt;OrthogonalTiledMapRenderer&lt;&#x2F;code&gt; does not do the trick at all: the problem are game objects itself.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;a game object is a stateful, dynamic object within a game world which represents anything the player can interact with: characters, items, events, etc.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Given a multi-layered map like this in &lt;a href=&quot;https:&#x2F;&#x2F;www.mapeditor.org&#x2F;&quot;&gt;Tiled&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bitbrain.itch.io&#x2F;the-legend-of-studentenfutter&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;legend-of-studentenfutter-screenshot.webp&quot; alt=&quot;los-screenshot&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Do you note the bridge? How can I achieve that the player gets either rendered below the bridge (when walking beneath it) or is walking on the bridge? What about automatic collision detection? How can I prevent that the player is able to fall off the bridge, but can walk beneath it without problems? All these challenges can not be solved by using &lt;code&gt;OrthogonalTiledMapRenderer&lt;&#x2F;code&gt;.
Instead, you have to write your own z-index ordering logic. Don&#x27;t worry though, these challenges have been solved within &lt;strong&gt;braingdx&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;&#x2F;* within braingdx you simply have this *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;onCreate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;GameContext2D context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;   TiledMap map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;getAssetLoader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;orthogonal-map.tmx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;         TiledMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;class
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;&#x2F;&#x2F; Obtain the tiledmap manager from the game context
&lt;&#x2F;span&gt;&lt;span&gt;   TiledMapManager tiledMapManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;getTiledMapManager&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;   TiledMapContext tiledMapContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tiledMapManager&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;&#x2F;&#x2F; the map we want to load
&lt;&#x2F;span&gt;&lt;span&gt;         map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;&#x2F;&#x2F; passing the internal Camera object
&lt;&#x2F;span&gt;&lt;span&gt;         context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;getGameCamera&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;getInternal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s all you need! In this blog series I am going to show you how I achieved that.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-braingdx-renders-stuff-onto-the-screen&quot;&gt;How braingdx renders stuff onto the screen&lt;&#x2F;h2&gt;
&lt;p&gt;Before we get to the meat, let us talk a bit about how my framework actually displays stuff and why it does it that way. This is important to know so it becomes easier to integrate tiled maps directly into the framework:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;braingdx-render-pipeline.webp&quot; alt=&quot;pipeline&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The framework renders different layers onto each other which result in the final frame:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;First, it renders the &lt;strong&gt;background&lt;&#x2F;strong&gt; layer, this is mostly something like a parallax layer or a static background image.&lt;&#x2F;li&gt;
&lt;li&gt;Onto the background, we can now render the &lt;strong&gt;game world&lt;&#x2F;strong&gt;. Simply put, the game world contains dynamic &lt;strong&gt;game objects&lt;&#x2F;strong&gt; which can change attributes like position, shape, rotation etc. dynamically&lt;&#x2F;li&gt;
&lt;li&gt;The lighting is rendered onto all previous layers.&lt;&#x2F;li&gt;
&lt;li&gt;At last, we can now render the UI onto the screen&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Since this order is static, where do we render our tiled map? Rendering it as part of the background layer does not allow us to render game objects behind particular layers. So, we have to render the tiledmap somehow as part of the game world.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bringing-everything-together&quot;&gt;Bringing everything together&lt;&#x2F;h2&gt;
&lt;p&gt;Initially, I never wanted to write my own framework. Reinventing the wheel should be avoided whenever possible. We can save a ton of time by just using what already exists. However, in case of tiled maps I could not find a single solution which satisfies my requirements.&lt;&#x2F;p&gt;
&lt;p&gt;When creating this framework, I did not want to force new APIs onto the user - many parts are just re-using existing &lt;a href=&quot;https:&#x2F;&#x2F;libgdx.badlogicgames.com&quot;&gt;libgdx&lt;&#x2F;a&gt; APIs. In case of tiled maps, I found a very simple solution to my problem:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;braingdx&lt;&#x2F;strong&gt; treats each tiledmap layer as an individual &lt;strong&gt;game object&lt;&#x2F;strong&gt; and renders them as part of the &lt;strong&gt;world layer&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Each &lt;strong&gt;game object&lt;&#x2F;strong&gt; has its own z-index, which defines the order in which game objects are rendered. When drawing tiledmap layers as part of the gameworld render process, it allows us to have dynamic ordering. However, this begs a question:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;What should be the z-index of a particular tiledmap layer?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The formular looks as follows:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#090a0c;color:#dae4ed;&quot;&gt;&lt;code&gt;&lt;span&gt;zIndex = (layerIndex + 1) * rows - yIndex
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;layerIndex&lt;&#x2F;code&gt; is the number of the layer, counting from &lt;code&gt;0&lt;&#x2F;code&gt; upwards. The &lt;code&gt;rows&lt;&#x2F;code&gt; attribute is the number of total rows as part of the tiled map. Finally, the &lt;code&gt;yIndex&lt;&#x2F;code&gt; is the vertical index of the cell, the particular game object is currently on.&lt;&#x2F;p&gt;
&lt;p&gt;As a concrete example, let&#x27;s imagine the following setup:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;10x10&lt;&#x2F;code&gt; orthogonal tiledmap with a tile resolution of &lt;code&gt;32x32&lt;&#x2F;code&gt; pixels&lt;&#x2F;li&gt;
&lt;li&gt;the map consists of &lt;code&gt;2&lt;&#x2F;code&gt; tiled layers and a single object layer in between those&lt;&#x2F;li&gt;
&lt;li&gt;a player object is located on the object layer at position &lt;code&gt;x = 60, y = 110&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;braingdx&lt;&#x2F;strong&gt; will automatically compute the z-index according to the given properties.&lt;&#x2F;p&gt;
&lt;p&gt;At first, the framework calculates the so called &lt;code&gt;yIndex&lt;&#x2F;code&gt; as follows:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#090a0c;color:#dae4ed;&quot;&gt;&lt;code&gt;&lt;span&gt;yIndex = floor(110 &#x2F; 32) = 3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So the game object is positioned at a &lt;code&gt;yIndex&lt;&#x2F;code&gt; of &lt;strong&gt;3&lt;&#x2F;strong&gt;. The framework does not have a concept of object layers, since each game object is rendered separately, depending on their position. Instead, &lt;strong&gt;braingdx&lt;&#x2F;strong&gt; only keeps tiledmap layers. A game object is always translated onto the layer underneath. So, a tiledmap layer above the game object will always be rendered above the game object. As a result, the &lt;code&gt;layerIndex&lt;&#x2F;code&gt; of the assigned tiledmap layer is &lt;strong&gt;0&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This results to the following computation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#090a0c;color:#dae4ed;&quot;&gt;&lt;code&gt;&lt;span&gt;zIndex = (0 + 1) * 10 - 3 = 7
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So the player at its current position will have a &lt;code&gt;zIndex&lt;&#x2F;code&gt; of &lt;strong&gt;7&lt;&#x2F;strong&gt;. This is all done by &lt;strong&gt;braingdx&lt;&#x2F;strong&gt; internally. Since game objects are rendered in the order of their &lt;code&gt;zIndex&lt;&#x2F;code&gt; attribute, it is ensured that game objects can be dynamically drawn before or after a particular tiledmap layer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-about-tiledmap-layers-then&quot;&gt;What about tiledmap layers then?&lt;&#x2F;h2&gt;
&lt;p&gt;We have learned how &lt;strong&gt;braingdx&lt;&#x2F;strong&gt; computes &lt;code&gt;zIndex&lt;&#x2F;code&gt; of game objects and that all game objects are drawn in the order of that index value. However, what about the layers itself? You might remember, that &lt;strong&gt;braingdx&lt;&#x2F;strong&gt; treats an entire tiledmap layer as a single game object. This means that &lt;strong&gt;braingdx&lt;&#x2F;strong&gt; does the following when loading tiled maps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;iterate over all layers of the tiledMap&lt;&#x2F;li&gt;
&lt;li&gt;in case of a object layer, add a new game object to the game world and assign all the properties such as dimensions, position, type etc. to the game object&lt;&#x2F;li&gt;
&lt;li&gt;in case of a tiledmap layer, add a new game object to the game at position &lt;code&gt;x = 0, y = 0&lt;&#x2F;code&gt; and set the game object to &lt;code&gt;active = false&lt;&#x2F;code&gt;. This ensures that the layer itself is excluded from collision detection&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Since the framework separates the rendering of game objects, we have to define an own &lt;code&gt;GameObject2DRenderer&lt;&#x2F;code&gt; for our tiledmap objects:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span&gt;OrthogonalMapLayerRenderer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;GameObject2DRenderer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;private final &lt;&#x2F;span&gt;&lt;span&gt;TiledMapTileLayer layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;private final &lt;&#x2F;span&gt;&lt;span&gt;OrthographicCamera camera&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;private final &lt;&#x2F;span&gt;&lt;span&gt;TiledMap map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span&gt;OrthogonalTiledMapRenderer renderer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;OrthogonalMapLayerRenderer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;         TiledMapTileLayer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;         TiledMap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;         OrthographicCamera &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;camera&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;layer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;camera &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; camera&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e8447e;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;GameObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;Batch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;batch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;delta&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;&#x2F;&#x2F; we dynamically create the renderer for performance&#x2F;testing reasons
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;renderer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;         renderer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;OrthogonalTiledMapRenderer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; batch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;      AnimatedTiledMapTile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;updateAnimationBaseTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;      renderer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;setView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;camera&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      renderer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;renderTileLayer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;render&lt;&#x2F;code&gt; method will be called whenever our tiledmap layer object gets drawn. Since we want to ensure that each layer has its own renderer, we have to generate the game object type for the tiledmap layer and register it to the &lt;strong&gt;RenderManager&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;String id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;UUID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;randomUUID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;getRenderManager&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; renderer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;A lot of time is wasted during gamejams sorting out render issues with tiledmaps. Modern game engines like &lt;strong&gt;Unity&lt;&#x2F;strong&gt; or &lt;strong&gt;Unreal Engine&lt;&#x2F;strong&gt; will do that for you - however for us Java folks there is not a simple way. Most of the time, we copy-paste together config from gamedev forums or Github, but we always had to re-invent the wheel each time. With &lt;strong&gt;braingdx&lt;&#x2F;strong&gt; this changes everything!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;braingdx&quot;&gt;Checkout braingdx&lt;&#x2F;a&gt; and see for yourself: it can save you a lot of time when participating in gamejams!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How I animated scape</title>
        <published>2019-05-11T10:00:00+00:00</published>
        <updated>2019-05-11T10:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bitbra.in/blog/how-i-animated-scape/"/>
        <id>https://bitbra.in/blog/how-i-animated-scape/</id>
        
        <content type="html" xml:base="https://bitbra.in/blog/how-i-animated-scape/">&lt;p&gt;In a &lt;a href=&quot;&#x2F;2019&#x2F;05&#x2F;10&#x2F;one-finger-to-rule-them-all.html&quot;&gt;previous blog post&lt;&#x2F;a&gt; I talked about game design decisions I made in my most recent game project called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;scape&quot;&gt;scape&lt;&#x2F;a&gt;. You might notice that I have a particular animation style. At the current stage of development scape looks like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;scape-animation-style.webp&quot; alt=&quot;scape-animation-style&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The game did not always look like that! I started creating initial mockups back in 2018. Back then all I knew was the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;since I binged &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mr._Robot&quot;&gt;Mr. Robot&lt;&#x2F;a&gt; during that time I really wanted to craft a &quot;hacker&quot; themed game&lt;&#x2F;li&gt;
&lt;li&gt;I love the neon aspect of synthwave and cyberpunk - the game should have vibrant colours as well&lt;&#x2F;li&gt;
&lt;li&gt;you should be able to play the game like &lt;a href=&quot;https:&#x2F;&#x2F;apkpure.com&#x2F;yoo-ninja-free&#x2F;com.RunnerGames.game.YooNinja_Lite&quot;&gt;Yoo Ninja&lt;&#x2F;a&gt; which is one of my favourite smartphone games ever created&lt;&#x2F;li&gt;
&lt;li&gt;I thought it&#x27;d be pretty cool to play as a little virus, infecting a computer system&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After I thought about the initial design elements of the game I used Pyxel to create a first mockup. Keep in mind, this mockup is from 2018:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;scape-initial-mockup-from-2018.webp&quot; alt=&quot;scape-initial-mockup&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Right after creating this mockup &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;scape&#x2F;commit&#x2F;3fb3170379aec277f9dc39dc556f1b9e7cb61a51&quot;&gt;I pushed my first commit&lt;&#x2F;a&gt; to Github. Within a couple of hours a prototype has been created with all game mechanics implemented: &lt;strong&gt;jumping&lt;&#x2F;strong&gt; and &lt;strong&gt;flipping gravity&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;video autoplay controls loop preload=&quot;auto&quot;&gt;
&lt;source src=&quot;https:&#x2F;&#x2F;video.twimg.com&#x2F;tweet_video&#x2F;Dk5G0cIWsAAK_Mu.mp4&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
&lt;&#x2F;video&gt;
&lt;p&gt;Next I am going to explain how I approached the player animation.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;animating-the-player&quot;&gt;Animating the player&lt;&#x2F;h1&gt;
&lt;p&gt;The player is animated by using a 8x3 spritesheet with a sprite size of 8x8 pixel. All in all, spritesheets in scape are really tiny and I use a virtual camera ingame to zoom into the szene in order to magnify the pixel effect.&lt;&#x2F;p&gt;
&lt;p&gt;This is how the spritesheet looks like:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;scape-animation-character-spritesheet.webp&quot; alt=&quot;player-animation&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The first row is used for basic movement animation. The second row is animating wall climbing. When the player is climbing a wall and moves just vertically, that animation is activated. Also, when a player is cornered or blocked, the third row is used as an animation.
The animation itself is looping in a so called &lt;a href=&quot;https:&#x2F;&#x2F;libgdx.badlogicgames.com&#x2F;ci&#x2F;nightlies&#x2F;docs&#x2F;api&#x2F;com&#x2F;badlogic&#x2F;gdx&#x2F;graphics&#x2F;g2d&#x2F;Animation.PlayMode.html#LOOP_PINGPONG&quot;&gt;LOOP_PINGPONG&lt;&#x2F;a&gt; fashion. All animation ingame is done by &lt;a href=&quot;https:&#x2F;&#x2F;libgdx.badlogicgames.com&quot;&gt;libgdx&lt;&#x2F;a&gt;. When the player is jumping though, I am pausing the animation and resetting it to the initial index to achieve some kind of idle effect.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;level-animation&quot;&gt;Level animation&lt;&#x2F;h1&gt;
&lt;p&gt;More complex to animate are the level animations themselves. Each frame is handdrawn by me within &lt;a href=&quot;https:&#x2F;&#x2F;pyxeledit.com&quot;&gt;Pyxel&lt;&#x2F;a&gt;. This is really time-consuming but it is also fun to see a sprite coming &quot;to live&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;I have created several spritesheets, each of them has a particular style or purpose:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;vertical spritesheet&lt;&#x2F;strong&gt; contains sprites which are vertically aligned. Animation frames are created from left to right of the spritesheet&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;horizontal spritesheet&lt;&#x2F;strong&gt; contains sprites which are horizontally aligned. Animation frames are created from top to bottom of the spritesheet&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;block spritesheet&lt;&#x2F;strong&gt; contains square sprites. Animation frames are created from left to right of the spritesheet.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After a while I realised that it probably was a mistake creating horizontal spritesheets at all. The simple reason is extendability. In order to build my levels I use the famous &lt;a href=&quot;https:&#x2F;&#x2F;www.mapeditor.org&quot;&gt;Tiled Editor&lt;&#x2F;a&gt;. In there you can import spritesheets and define animations. Unfortunately, Tiled is counting sprite indices from left to right, row by row. When I want to add more animations to my spritesheet, I have to increase the image size of it, which has an impact on all indices since Tiled requires to recompute those. That can lead to visual glitches and it is not clear what Tiled is doing behind the scenes. Be careful animating sprites vertically!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Within spritesheets, always animate frames from left to right and grow your spritesheet vertically in order to avoid glitches in editors such as Tiled!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Within a spritesheet itself an animation is structured as follows:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;scape-animation-vertical-tileset.webp&quot; alt=&quot;spritesheet-animation&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In order to achieve an affect of energy lines cycling through the wires, I carefully picked a pattern with decreasing colour vibrancy which travels through the tile itself. This is how the tile looks animated in Tiled:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;scape-animation-tile-animation.webp&quot; alt=&quot;spritesheet-animation-animated&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Then I simply have to create hundreds of these handdrawn animations, sounds simple, doesn&#x27;t it? Well, I realised after a while that it breaks the immersion when the animations are not in sync. This made things far more complicated since it means that I not only have to animate each tile but also I have to consider sibling tiles to fluidly integrate with eachother.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;animating-bytes&quot;&gt;Animating bytes&lt;&#x2F;h1&gt;
&lt;p&gt;When playing scape, the player has to collect so called &lt;strong&gt;bytes&lt;&#x2F;strong&gt;. Animating those bytes was much simpler than taking care of individual level tiles:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;scape-animation-byte-spritesheet.webp&quot; alt=&quot;byte-spritesheet&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In-game I then used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;AurelienRibon&#x2F;universal-tween-engine&quot;&gt;Universal Tween Engine&lt;&#x2F;a&gt; to animate slight scaling. To improve visual fidelity I also added particle effects which I had created by using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;libgdx&#x2F;libgdx&#x2F;wiki&#x2F;2D-Particle-Editor&quot;&gt;the 2D particle editor of libgdx&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;particle2d-editor.webp&quot; alt=&quot;particle-editor&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Within my game code I then rendered these particle effects over the animated and scaled sprites. Later on I also implemented lighting to my game. At that point, I purposfully attached pink lights onto the byte objects so they are visible from the far!&lt;&#x2F;p&gt;
&lt;p&gt;I really enjoy doing manual animation since you have more control over each individual pixel on the screen! The game will release later this year. In the meantime you can already download a pre-release version. Feel free to give me feedback either here or on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;bitbrain_&quot;&gt;twitter&lt;&#x2F;a&gt;! If you are especially interested in further development on this project, make sure to &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;i&#x2F;moments&#x2F;1127137651549667328&quot;&gt;checkout this Moment page&lt;&#x2F;a&gt; I created.&lt;&#x2F;p&gt;
&lt;iframe src=&quot;https:&#x2F;&#x2F;itch.io&#x2F;embed&#x2F;357509?bg_color=15171A&amp;amp;fg_color=05fecf&amp;amp;link_color=f20179&amp;amp;border_color=15171A&quot; width=&quot;100%&quot; height=&quot;167&quot; frameborder=&quot;0&quot;&gt;&lt;&#x2F;iframe&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Game design: one finger to rule them all</title>
        <published>2019-05-10T10:00:00+00:00</published>
        <updated>2019-05-10T10:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bitbra.in/blog/one-finger-to-rule-them-all/"/>
        <id>https://bitbra.in/blog/one-finger-to-rule-them-all/</id>
        
        <content type="html" xml:base="https://bitbra.in/blog/one-finger-to-rule-them-all/">&lt;p&gt;Everyone owns a smartphone nowadays. People are swiping within their apps up and down, left and right, panning in and double tap  whenever they get the opportunity. What people definitely don&#x27;t want is having to use more than a single finger. When looking at popular apps like Instagram, Twitter or Boost, the entire UX flow is designed for single-hand use. Game developers such as &lt;a href=&quot;https:&#x2F;&#x2F;king.com&quot;&gt;King&lt;&#x2F;a&gt; have taken that principle to another level for a simple reason: &lt;strong&gt;Accessibility&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you want your game to be played by the masses, it needs to be accessible. In order for a game to be accessible, it needs to be supported by the hardware and the user should not get confused how to actually play the game. Many mobile games have long and annoying tutorials, explaining the complex UI and input methods such as buttons and virtual HUDs. Personally, I always disliked the fact that controls are being emulated on smartphones via HUDs like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;icdn9.digitaltrends.com&#x2F;image&#x2F;fortnite-mobile-beginners-guide-gather-720x720.jpg&quot; alt=&quot;fortnite-hud&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Especially on a busy train or a cigarette in one hand, playing those kind of games can be quite tricky. Why don&#x27;t all mobile games just have simple &lt;strong&gt;One Finger to Rule them All&lt;&#x2F;strong&gt; controls?&lt;&#x2F;p&gt;
&lt;h1 id=&quot;simple-controls-are-challenging&quot;&gt;Simple controls are challenging&lt;&#x2F;h1&gt;
&lt;p&gt;There is a simple reason why so many games try to avoid simple input but instead use more complex input mechanisms: it can become rather complicated to communicate how the game can be played, when there is just a single input method! On the other hand, as a user I do not want to read through manuals or tutorials to learn how to actually play the game. Time is much better spent and there are so many games out there which do not require any tutorials whatsoever. Thus, designing a simple input system which can be just with just one finger is key. Before we can implement simple input, the following questions need to be answered:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;how does the player know if he should swipe, pan or where to click?&lt;&#x2F;li&gt;
&lt;li&gt;how do I prevent that the player accidentally uses wrong controls?&lt;&#x2F;li&gt;
&lt;li&gt;how can I ensure the player learns the controls naturally by just trying out?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Answering these questions gave me confidence to build all my games with simple controls. This made designing UI components rather hard but eventually paid of by having a really simple game experience.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The more limited the controls are, the more accessible the game is. However, the amount of input combinations decreases with limited controls.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Finding the perfect balance between those two is the real challenge.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;a-first-approach&quot;&gt;A first approach&lt;&#x2F;h1&gt;
&lt;p&gt;Currently I am working on a small game called &lt;strong&gt;scape&lt;&#x2F;strong&gt; - it is a fast-paced 2D platformer written in &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Java_(programming_language)&quot;&gt;Java&lt;&#x2F;a&gt;, using my gamejam framework called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;braingdx&quot;&gt;braingdx&lt;&#x2F;a&gt;. You play a little virus infecting a compuer system. I got inspired by &lt;a href=&quot;https:&#x2F;&#x2F;yoo-ninja-free.en.uptodown.com&#x2F;android&quot;&gt;Yoo Ninja!&lt;&#x2F;a&gt;, one of my favourite Android games:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;img.utdstc.com&#x2F;screen&#x2F;13&#x2F;yoo-ninja-free-1.jpg:l&quot; alt=&quot;yoo-ninja&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Basically, the idea is to reach the end of the level without falling out of bounds. Touch the screen to jump (and effectively flip gravity). This is how my game &lt;strong&gt;scape&lt;&#x2F;strong&gt; loks like:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;scape-showcase.webp&quot; alt=&quot;scape-showcase&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The first thing the player does is touching the screen and one notices that the character will jump as a consequence. However, this has some impact on the initial game design:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the player should not be punished for not touching the screen initially&lt;&#x2F;li&gt;
&lt;li&gt;the player should notice that he needs to do &lt;em&gt;something&lt;&#x2F;em&gt; in order to progress&lt;&#x2F;li&gt;
&lt;li&gt;the player should also learn in the beginning what the consequences are if no action is taken&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To solve all these questions I did a simple trick: I placed a block in front of the player. As a result the player bumps into the block at some point, gets stuck and the moving camera will kill the player if out of bounds:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;scape-tutorial-block.webp&quot; alt=&quot;scape-block&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The player has no other choice than trying to touch the screen. Each level has been designed so the player automatically initiates actions to play the game, without having an explicit tutorial:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;scape-tutorial-block-skip.webp&quot; alt=&quot;scape-block-skip&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As a game designer, this is not obvious at first. Only after a couple of iterations I can eventually refine the level structure to ensure the best possible game experience.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-dark-side-of-the-moon&quot;&gt;The dark side of the moon&lt;&#x2F;h1&gt;
&lt;p&gt;Having a character jump via touch is not the most difficult mechanic. The &lt;strong&gt;One Touch Mechanic&lt;&#x2F;strong&gt; made things especially more tricky when it came to menu flow:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;how do I communicate to the player that he has to swipe in order to switch to the next level in the stage selection?&lt;&#x2F;li&gt;
&lt;li&gt;how does a player know he needs to touch the screen to enter a level?&lt;&#x2F;li&gt;
&lt;li&gt;how does a player know he requires to keep the screen touched to skip a cutscene?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Those questions are just partially answered and I am currently about to rewrite the entire menu flow to improve on that drastically.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;into-the-future&quot;&gt;Into the Future&lt;&#x2F;h1&gt;
&lt;p&gt;Currently I am refining the level design, updating assets and rewriting the level selection flow. In another blog article I am going to elaborate on that more detailed. Stay tuned!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How to automatically publish your game to itch.io</title>
        <published>2019-02-18T10:00:00+00:00</published>
        <updated>2019-02-18T10:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bitbra.in/blog/automatically-publish-games-to-itchio/"/>
        <id>https://bitbra.in/blog/automatically-publish-games-to-itchio/</id>
        
        <content type="html" xml:base="https://bitbra.in/blog/automatically-publish-games-to-itchio/">&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;why should I even upload my games automatically?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is a good question. Simple answer is, that during a gamejam you can fully concentrate on building your game. Especially, when the deadline is coming closer, you simply have to commit and push your changes, in order to trigger an automatic deployment of your game to itch.io:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;make a code or asset change change locally&lt;&#x2F;li&gt;
&lt;li&gt;commit your change via Git and push it to Github&lt;&#x2F;li&gt;
&lt;li&gt;TravisCI automatically picks up your change and builds your game&lt;&#x2F;li&gt;
&lt;li&gt;TravisCI automatically pushes the new build to itch.io&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This tutorial shows you how to do that!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;prequisites&quot;&gt;Prequisites&lt;&#x2F;h1&gt;
&lt;p&gt;For this tutorial, we use the following technologies:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;&quot;&gt;Github&lt;&#x2F;a&gt; to version control our game code&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;travis-ci.org&quot;&gt;TravisCI&lt;&#x2F;a&gt; as a build agent to build our game&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;itch.io&quot;&gt;itch.io&lt;&#x2F;a&gt; to host our game&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;itch.io&#x2F;docs&#x2F;butler&#x2F;pushing.html&quot;&gt;Butler&lt;&#x2F;a&gt; to upload our game builds to itch.io&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;setup-github-repository&quot;&gt;Setup Github repository&lt;&#x2F;h1&gt;
&lt;p&gt;If not already done, create a Github repository to host our source code:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;create-new-github-repo.webp&quot; alt=&quot;create-new-github-repo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;setup-itch-io&quot;&gt;Setup itch.io&lt;&#x2F;h1&gt;
&lt;p&gt;Before we can start uploading our first game, we need to create an itch.io game project:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;create-new-game-project.webp&quot; alt=&quot;create-new-game-project&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After your project is created, head over to your account settings to generate a new API key. This key is required so other services such as TravisCI are able to communicate with itch.io.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;create-new-api-key.webp&quot; alt=&quot;create-new-api-key&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;prepare-travisci-deployment&quot;&gt;Prepare TravisCI deployment&lt;&#x2F;h1&gt;
&lt;p&gt;Once the repository exists and itch.io is prepared, we need to prepare TravisCI. This consists of the following steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;create deployment script&lt;&#x2F;li&gt;
&lt;li&gt;commit and push travis.yml&lt;&#x2F;li&gt;
&lt;li&gt;prepare TravisCI project&lt;&#x2F;li&gt;
&lt;li&gt;setup &lt;code&gt;BUTLER_API_KEY&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;create-deployment-script&quot;&gt;Create deployment script&lt;&#x2F;h1&gt;
&lt;p&gt;This script will take your artifacts and push it to itch.io. Create a new file, called &lt;code&gt;deploy.sh&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;e
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;o&lt;&#x2F;span&gt;&lt;span&gt; pipefail
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;[[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;BUTLER_API_KEY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;Unable to deploy! No BUTLER_API_KEY environment variable specified!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;prepare_butler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;Preparing butler...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;download_if_not_exist&lt;&#x2F;span&gt;&lt;span&gt; http:&#x2F;&#x2F;dl.itch.ovh&#x2F;butler&#x2F;linux-amd64&#x2F;head&#x2F;butler butler
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; +x butler
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;prepare_and_push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;Push &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt; build to itch.io...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;.&#x2F;butler&lt;&#x2F;span&gt;&lt;span&gt; push &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;download_if_not_exist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;! -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;2 ]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;curl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;O &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;gt; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;project&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;bitbrain&#x2F;mygame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;artifact&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;mygame.jar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;platform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;windows-linux-mac&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;prepare_butler
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;prepare_and_push &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;project &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;artifact &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;platform
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;Done.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; 0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This script first checks, if the environment variable &lt;code&gt;BUTLER_API_KEY&lt;&#x2F;code&gt; is defined. This variable can be setup within Travis and is required for itch.io to authenticate your game upload.
Afterwards we define a bunch of helper functions. Then we download the latest version of &lt;strong&gt;butler&lt;&#x2F;strong&gt; and upload the game with it. Please ensure to configure the correct &lt;code&gt;project&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;setup-travis-yml&quot;&gt;Setup .travis.yml&lt;&#x2F;h1&gt;
&lt;p&gt;This file is required by TravisCI to understand how to build your game. For example, you can setup a Java environment (for Java games) or Objective-C environment (for Unity games). TravisCI ensures that this environment is set up and it will build your game:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;language&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;android
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;jdk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;openjdk8
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;android&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;components&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# The BuildTools version used by your project
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;build-tools-26.0.2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# The SDK version used to compile your project
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;android-26
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;echo &amp;quot;this is my game&amp;quot; &amp;gt; mygame.jar
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;after_script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;chmod +x deploy.sh &amp;amp;&amp;amp; .&#x2F;deploy.sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Feel free to create a different .yml for Java, C++ or even Android! Read more about that &lt;a href=&quot;https:&#x2F;&#x2F;docs.travis-ci.com&#x2F;user&#x2F;reference&#x2F;overview&#x2F;&quot;&gt;in the official docs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;prepare-travisci-project&quot;&gt;Prepare TravisCI project&lt;&#x2F;h1&gt;
&lt;p&gt;Now we have to configure our TravisCI project. Head over to https:&#x2F;&#x2F;travis-ci.org, authenticate with your Github account and you should be able to import your Github project from there. Once imported, head over to the settings to configure environment variables:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;travis-ci-head-to-settings.webp&quot; alt=&quot;travis-ci-head-to-settings&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;images&#x2F;travis-ci-add-butler-api-key.webp&quot; alt=&quot;travis-ci-add-butler-api-key&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;run-the-build&quot;&gt;Run the build&lt;&#x2F;h1&gt;
&lt;p&gt;Congratulations! You successfully set up the pipeline. Let&#x27;s run the build to see how your game automatically publishes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#090a0c;color:#dae4ed;&quot;&gt;&lt;code&gt;&lt;span&gt;Preparing butler...
&lt;&#x2F;span&gt;&lt;span&gt;  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
&lt;&#x2F;span&gt;&lt;span&gt;                                 Dload  Upload   Total   Spent    Left  Speed
&lt;&#x2F;span&gt;&lt;span&gt;100 19.6M  100 19.6M    0     0  31.6M      0 --:--:-- --:--:-- --:--:-- 31.6M
&lt;&#x2F;span&gt;&lt;span&gt;Push windows-linux-mac build to itch.io...
&lt;&#x2F;span&gt;&lt;span&gt;• For channel `windows-linux-mac`: pushing first build
&lt;&#x2F;span&gt;&lt;span&gt;• Pushing 16 B (1 files, 0 dirs, 0 symlinks)
&lt;&#x2F;span&gt;&lt;span&gt;✓ Added 16 B fresh data
&lt;&#x2F;span&gt;&lt;span&gt;✓ 86 B patch (no savings)
&lt;&#x2F;span&gt;&lt;span&gt;• Build is now processing, should be up in a bit.
&lt;&#x2F;span&gt;&lt;span&gt;Use the `butler status bitbrain&#x2F;mygame:windows-linux-mac` for more information.
&lt;&#x2F;span&gt;&lt;span&gt;Done.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Your latest game version is now available on itch.io:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;itch-io-my-game-upload.webp&quot; alt=&quot;itch-io-my-game-upload&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Continuous Delivery with Travis and Github</title>
        <published>2018-07-15T10:00:00+00:00</published>
        <updated>2018-07-15T10:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bitbra.in/blog/cd-with-travis/"/>
        <id>https://bitbra.in/blog/cd-with-travis/</id>
        
        <content type="html" xml:base="https://bitbra.in/blog/cd-with-travis/">&lt;p&gt;Some years ago I started working on a project called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;braingdx&quot;&gt;braingdx&lt;&#x2F;a&gt;. It is a gamejam framework based on &lt;a href=&quot;https:&#x2F;&#x2F;libgdx.badlogicgames.com&#x2F;&quot;&gt;libgdx&lt;&#x2F;a&gt;, fully written in &lt;strong&gt;Java&lt;&#x2F;strong&gt;. At some point I decided to make the artifact available for a broader audience. As a result I required a deployment flow to automatically upload the &lt;strong&gt;.jar&lt;&#x2F;strong&gt; files to an artifactory of my choice.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-silly-approach&quot;&gt;The silly approach&lt;&#x2F;h1&gt;
&lt;p&gt;I just wanted to publish artifacts, but not on each commit. Instead, I decided to go for a multi-&lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;docs&#x2F;git-branch&quot;&gt;branch&lt;&#x2F;a&gt; configuration like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;silly-git-flow.svg&quot; alt=&quot;silly-git-flow&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We have a &lt;code&gt;master&lt;&#x2F;code&gt; branch where we commit on. When we decide to release an artifact, we manually (locally) merge into &lt;code&gt;deploy&lt;&#x2F;code&gt;, push the changes and &lt;a href=&quot;https:&#x2F;&#x2F;travis-ci.org&#x2F;&quot;&gt;Travis CI&lt;&#x2F;a&gt; will pickup the build, thanks to the &lt;code&gt;.travis.yml&lt;&#x2F;code&gt; file configured:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;language&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;java
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;docker
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;jdk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;openjdk7
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;cache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;directories&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;$HOME&#x2F;.m2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;branches&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;only&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;deploy
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;COMMIT=${TRAVIS_COMMIT::8}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;before_install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;export CH_VERSION=$(docker run -v $(pwd):&#x2F;chime bitbrain&#x2F;chime:latest CHANGELOG.md version)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;export CH_TEXT=$(docker run -v $(pwd):&#x2F;chime bitbrain&#x2F;chime:latest CHANGELOG.md text)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;mvn versions:set -DnewVersion=$CH_VERSION
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;chmod +x deployment&#x2F;deploy.sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;.&#x2F;deployment&#x2F;deploy.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The configuration file has a &lt;code&gt;before_install&lt;&#x2F;code&gt; section. In there we use a tool written by me called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;chime&quot;&gt;chime&lt;&#x2F;a&gt;. We run this tool as a Docker container to extract version and changelog information from a &lt;code&gt;CHANGELOG.md&lt;&#x2F;code&gt; provided. For example, we have a file like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;markdown&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-markdown &quot;&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span&gt;Version 1.1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;This is version 1.1 description.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;some patchnotes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; more patchnotes
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span&gt;Version 1.0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;This is version 1.0 description.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;some patchnotes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; more patchnotes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The resulting environment variables would look like this (after &lt;code&gt;before_install&lt;&#x2F;code&gt; execution):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;CH_VERSION
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;Version&lt;&#x2F;span&gt;&lt;span&gt; 1.1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;CH_TEXT
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;This&lt;&#x2F;span&gt;&lt;span&gt; is version 1.0 description.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; some patchnotes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; more patchnotes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using this approach we can define versions within a &lt;code&gt;CHANGELOG.md&lt;&#x2F;code&gt; file and it should automatically pick up the latest version from the file. We update the version of the library temporarily via &lt;code&gt;mvn versions:set&lt;&#x2F;code&gt; with the latest version extracted from the changelog file.&lt;&#x2F;p&gt;
&lt;p&gt;Afterwards we run a &lt;code&gt;deploy.sh&lt;&#x2F;code&gt; script during the &lt;code&gt;install&lt;&#x2F;code&gt; stage:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;mvn&lt;&#x2F;span&gt;&lt;span&gt; deploy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;    -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;DskipTests &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;    --&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;settings&lt;&#x2F;span&gt;&lt;span&gt; deployment&#x2F;settings.xml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I configured a custom Nexus inside my &lt;code&gt;settings.xml&lt;&#x2F;code&gt; to push my artifacts to. Users of my library then would need to add the repository via repository statement in their configuration.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;silly-approach-lots-of-problems&quot;&gt;Silly approach, lots of problems&lt;&#x2F;h1&gt;
&lt;p&gt;The approach worked fine, however it was not as refined as I hoped it to be:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;my custom Nexus caused SSL Certificate issues on some Windows and Mac machines when trying to download dependencies&lt;&#x2F;li&gt;
&lt;li&gt;it is truly cumbersome to manually switch between &lt;code&gt;master&lt;&#x2F;code&gt; and &lt;code&gt;deploy&lt;&#x2F;code&gt; locally and merge all the time&lt;&#x2F;li&gt;
&lt;li&gt;the current multi-branch approach causes lots of merge commits (if we are not able to fast-forward)&lt;&#x2F;li&gt;
&lt;li&gt;sometimes you would forget to switch from &lt;code&gt;deploy&lt;&#x2F;code&gt; back to &lt;code&gt;master&lt;&#x2F;code&gt; locally and suddenly commiting on a wrong branch&lt;&#x2F;li&gt;
&lt;li&gt;not easy to have a mapping from version to commit history (missing &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;book&#x2F;en&#x2F;v2&#x2F;Git-Basics-Tagging&quot;&gt;tagging&lt;&#x2F;a&gt; functionality)&lt;&#x2F;li&gt;
&lt;li&gt;Travis only builds the &lt;code&gt;deploy&lt;&#x2F;code&gt; branch, not the master branch. We never truly compile each commit on &lt;code&gt;master&lt;&#x2F;code&gt; nor run any tests&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After putting some thought into it I came up with a much better, more light-weighted approach.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;one-branch-to-rule-them-all&quot;&gt;One branch to rule them all&lt;&#x2F;h1&gt;
&lt;p&gt;I eventually decided to get rid of the &lt;code&gt;deploy&lt;&#x2F;code&gt; branch after all. All commits should go to &lt;code&gt;master&lt;&#x2F;code&gt; and should be tested and&#x2F;or deployed on Travis. I would keep the &lt;code&gt;CHANGELOG.md&lt;&#x2F;code&gt; version extraction and do additional checks to avoid deploying already deployed versions twice:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;simple-branch-flow.svg&quot; alt=&quot;simple-branch-flow&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The new flow is executed whenever a new commit is pushed onto &lt;code&gt;master&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;checkout from SCM&lt;&#x2F;li&gt;
&lt;li&gt;extract version and changelog from &lt;code&gt;CHANGELOG.md&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Sign artifacts - this is required in order to push artifacts to &lt;a href=&quot;https:&#x2F;&#x2F;search.maven.org&#x2F;&quot;&gt;Maven Central&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Install&#x2F;Deployment
&lt;ul&gt;
&lt;li&gt;verify if the latest git tag is different than version extracted. Run deployment when extracted version from &lt;code&gt;CHANGELOG.md&lt;&#x2F;code&gt; is newer&lt;&#x2F;li&gt;
&lt;li&gt;when there is no difference in version, the version had been deployed already. Instead, run unit tests and generate code coverage reports&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Upload additional artifacts
&lt;ul&gt;
&lt;li&gt;happens on &lt;strong&gt;after_install&lt;&#x2F;strong&gt; stage&lt;&#x2F;li&gt;
&lt;li&gt;when the new version is different than the latest tag create a new &lt;a href=&quot;https:&#x2F;&#x2F;help.github.com&#x2F;articles&#x2F;creating-releases&#x2F;&quot;&gt;Github Release&lt;&#x2F;a&gt; which will automatically create a new tag with the current version&lt;&#x2F;li&gt;
&lt;li&gt;upload &lt;a href=&quot;http:&#x2F;&#x2F;bitbrain.github.io&#x2F;braingdx&#x2F;docs&#x2F;latest&#x2F;&quot;&gt;latest Javadoc&lt;&#x2F;a&gt; to Github&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In the rest of this article I will explain how some of these steps work in detail.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;sign-your-artifacts&quot;&gt;Sign your Artifacts&lt;&#x2F;h1&gt;
&lt;p&gt;In order to upload your artifacts to Central you require to sign your artifacts with a GPG signature. I recommend &lt;a href=&quot;http:&#x2F;&#x2F;www.debonair.io&#x2F;post&#x2F;maven-cd&#x2F;&quot;&gt;reading this tutorial&lt;&#x2F;a&gt; to learn how to do that.&lt;&#x2F;p&gt;
&lt;p&gt;In the tutorial the author explains that we want to encrypt our &lt;code&gt;codesigning.asc&lt;&#x2F;code&gt; file to prevent strangers from stealing it. We do that by installing and using the &lt;strong&gt;travis&lt;&#x2F;strong&gt; CLI:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;gem&lt;&#x2F;span&gt;&lt;span&gt; install travis
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;travis&lt;&#x2F;span&gt;&lt;span&gt; login
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;travis&lt;&#x2F;span&gt;&lt;span&gt; encrypt-file codesigning.asc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When running this I discovered that Travis would fail the build:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#090a0c;color:#dae4ed;&quot;&gt;&lt;code&gt;&lt;span&gt;bad decrypt
&lt;&#x2F;span&gt;&lt;span&gt;gpg: invalid radix64 character AE skipped
&lt;&#x2F;span&gt;&lt;span&gt;gpg: invalid radix64 character 13 skipped
&lt;&#x2F;span&gt;&lt;span&gt;gpg: invalid radix64 character F5 skipped
&lt;&#x2F;span&gt;&lt;span&gt;gpg: invalid radix64 character BE skipped
&lt;&#x2F;span&gt;&lt;span&gt;gpg: invalid radix64 character C5 skipped
&lt;&#x2F;span&gt;&lt;span&gt;gpg: invalid radix64 character AF skipped
&lt;&#x2F;span&gt;&lt;span&gt;gpg: invalid radix64 character C8 skipped
&lt;&#x2F;span&gt;&lt;span&gt;gpg: invalid radix64 character 14 skipped
&lt;&#x2F;span&gt;&lt;span&gt;gpg: invalid radix64 character 82 skipped
&lt;&#x2F;span&gt;&lt;span&gt;gpg: invalid radix64 character DF skipped
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What is going on?! I followed the tutorial step by step and for me it did not want to work. After hours of desperation and crying on the floor I found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;travis-ci&#x2F;travis-ci&#x2F;issues&#x2F;6936&quot;&gt;something on Github&lt;&#x2F;a&gt;. Apparently, on my Windows 10 machine the &lt;code&gt;travis encrypt-file&lt;&#x2F;code&gt; operation is broken and produces a corrupted encryption. WOW! Thanks for that. How did I fix it? A little bit of Docker 🐳 for the win. Let&#x27;s create a &lt;code&gt;Dockerfile&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; ubuntu
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;apt-get update &amp;amp;&amp;amp; apt-get install ruby ruby-dev gcc g++ make &amp;amp;&amp;amp; gem install travis
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;VOLUME &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span&gt; codesigning.asc &#x2F;test&#x2F;codesigning.asc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;ENV &lt;&#x2F;span&gt;&lt;span&gt;GITHUB_TOKEN=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;CMD &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;bash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;travis login --github-token $GITHUB_TOKEN &amp;amp;&amp;amp; travis-encrypt codesigning.asc &amp;amp;&amp;amp; echo codesigning.asc.enc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# Build our image
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt; encrypt-asc .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# Encrypt the file and produce it
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt; GITHUB_TOKEN=xxx encrypt-asc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; codesigning.asc.enc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# Clean up the dirty mess!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; rm encrypt-asc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;f
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After committing the &lt;strong&gt;codesigning.asc.enc&lt;&#x2F;strong&gt; file Travis was able to decrypt the GPG private key which is required to sign the artifacts.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;check-if-version-is-changed&quot;&gt;Check if version is changed&lt;&#x2F;h1&gt;
&lt;p&gt;In order to check if the version has changed I did the following during the &lt;code&gt;before_install&lt;&#x2F;code&gt; stage:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;LATEST_TAG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt; describe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;abbrev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After that we can deploy or just run the tests, depending of the version:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;LATEST_TAG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot; != &amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;CH_VERSION&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;Latest deployed version=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;LATEST_TAG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt; not equal new version=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;CH_VERSION&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;. Deploying...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;mvn&lt;&#x2F;span&gt;&lt;span&gt; deploy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;    -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;Psign &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;    --&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;settings&lt;&#x2F;span&gt;&lt;span&gt; deployment&#x2F;settings.xml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;Skipping release! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;LATEST_TAG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt; already released to Nexus! Running tests...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;mvn&lt;&#x2F;span&gt;&lt;span&gt; clean test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;T4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;pushing-new-release-to-github&quot;&gt;Pushing new release to Github&lt;&#x2F;h1&gt;
&lt;p&gt;In order to push the new release automatically to Github, we do the following on the &lt;code&gt;after_install&lt;&#x2F;code&gt; stage:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;HOME
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;global&lt;&#x2F;span&gt;&lt;span&gt; user.email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;sirlancelbot@gmail.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;global&lt;&#x2F;span&gt;&lt;span&gt; user.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;Sir Lancelbot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;quiet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;master https:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;GITHUB_TOKEN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;@github.com&#x2F;bitbrain&#x2F;braingdx
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# Replacing line endings in body
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;sed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;:a;N;$!ba;s&#x2F;\r{0,1}\n&#x2F;\\n&#x2F;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39; &amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;CH_TEXT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;{&amp;quot;tag_name&amp;quot;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;CH_VERSION&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;&amp;quot;,&amp;quot;target_commitish&amp;quot;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;TRAVIS_BRANCH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;Version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;CH_VERSION&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;&amp;quot;,&amp;quot;body&amp;quot;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;&amp;quot;,&amp;quot;draft&amp;quot;:false,&amp;quot;prerelease&amp;quot;:false}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;curl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt; POST &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span&gt; bitbrain:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;GITHUB_TOKEN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;api.github.com&#x2F;repos&#x2F;bitbrain&#x2F;braingdx&#x2F;releases
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will ensure that a latest release has been pushed (including latest changelog content from &lt;code&gt;CHANGELOG.md&lt;&#x2F;code&gt; and Github will automatically create a tag for us. Next time we run the pipeline, it won&#x27;t deploy again since the tag has been updated.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;uploading-javadoc-to-github-pages&quot;&gt;Uploading Javadoc to Github pages&lt;&#x2F;h1&gt;
&lt;p&gt;Uploading Javadoc to Github pages is a little bit more tricky. I want to have the following requirements fullfilled:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;each version is persisted in Github pages, e.g. &lt;code&gt;&#x2F;docs&#x2F;1.0.0&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;the latest docs should be available via &lt;code&gt;&#x2F;docs&#x2F;latest&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# Create temporary directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt; cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;docs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;braingdx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;mvn&lt;&#x2F;span&gt;&lt;span&gt; versions:set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;DskipTests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;DnewVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;CH_VERSION&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;T4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;mvn&lt;&#x2F;span&gt;&lt;span&gt; javadoc:javadoc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;DskipTests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;T4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;docs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# Copy generated Javadocs into a temporary directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;cp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;braingdx&#x2F;core&#x2F;target&#x2F;site&#x2F;apidocs&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;* $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;docs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# Cleanup
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;rm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;rf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;braingdx&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;braingdx
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# Checkout Jekyll branch and create new folder with new version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; checkout gh-pages
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;braingdx&#x2F;docs&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;CH_VERSION
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;cp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;docs&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;* $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;braingdx&#x2F;docs&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;CH_VERSION
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# Copy also into &amp;quot;latest&amp;quot; docs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;rm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;rf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;braingdx&#x2F;docs&#x2F;latest
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;braingdx&#x2F;docs&#x2F;latest
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;cp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;docs&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;* $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;braingdx&#x2F;docs&#x2F;latest
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#353e4a;&quot;&gt;# Add everything and push!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;Travis build &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;TRAVIS_BUILD_NUMBER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt; - update Javadoc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;fq&lt;&#x2F;span&gt;&lt;span&gt; origin gh-pages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;Successfully deployed Javadoc to &#x2F;docs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;bitbrain.github.io&#x2F;braingdx&#x2F;docs&#x2F;latest&#x2F;&quot;&gt;Click here&lt;&#x2F;a&gt; to see an example of the generated page created.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;The new flow allows me to have:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;single branch&lt;&#x2F;li&gt;
&lt;li&gt;every commit is tested in Travis&lt;&#x2F;li&gt;
&lt;li&gt;I control deployments via &lt;code&gt;CHANGELOG.md&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Github releases and tags are automatically created&lt;&#x2F;li&gt;
&lt;li&gt;Javadoc is automatically created&lt;&#x2F;li&gt;
&lt;li&gt;on release, artifacts are signed and pushed to Maven Central&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Do you have feedback? Make sure to follow me &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;bitbrain_&quot;&gt;@bitbrain_&lt;&#x2F;a&gt; on &lt;strong&gt;Twitter&lt;&#x2F;strong&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&quot;&gt;@bitbrain&lt;&#x2F;a&gt; on &lt;strong&gt;Github&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Level Generation in Mindmazer</title>
        <published>2017-09-03T10:00:00+00:00</published>
        <updated>2017-09-03T10:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bitbra.in/blog/level-generation-in-mindmazer/"/>
        <id>https://bitbra.in/blog/level-generation-in-mindmazer/</id>
        
        <content type="html" xml:base="https://bitbra.in/blog/level-generation-in-mindmazer/">&lt;p&gt;Today I want to talk about my project &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;mindmazer&quot;&gt;mindmazer&lt;&#x2F;a&gt;. In this simple 2D puzzle game the player has to remember a certain path to progress to the next stage. When starting this project I had to decide if I give the player a static list of predefined levels. After some time I decided against it and went for a procedural generation approach. In this article I am going to explain how these levels are generated.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-level&quot;&gt;The Level&lt;&#x2F;h1&gt;
&lt;p&gt;Typical ingame level look like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;mindmazer-level-simple.webp&quot; alt=&quot;mindmazer-level-simple&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You notice that the shapes are quite simple and the path is easy to remember. Therefore, as more you progress in the game as more complex the level become:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;mindmazer-level-complex.webp&quot; alt=&quot;mindmazer-level-complex&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;How to generate those levels? Well, first of all I am using &lt;a href=&quot;https:&#x2F;&#x2F;libgdx.badlogicgames.com&quot;&gt;libgdx&lt;&#x2F;a&gt; for &lt;a href=&quot;&#x2F;2017&#x2F;08&#x2F;17&#x2F;why-I-still-use-java-for-gamedev&quot;&gt;all my games&lt;&#x2F;a&gt;. This Java library allows me to draw things on the screen and to define a framework to run my game with. Unfortunately, this library does not give me an &quot;out-of-the-box&quot; level generator. Thus, I had to write an algorithm myself.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;biom-data&quot;&gt;Biom Data&lt;&#x2F;h1&gt;
&lt;p&gt;Let us first describe how a level should get defined. I did not want to have a &quot;random&quot; algorithm which just appends more cells into random directions. The result would be a randomly formed snake where I wouldn&#x27;t have any control over. At least I wanted &lt;strong&gt;control&lt;&#x2F;strong&gt; about various level aspects. Each level is composed out of multiple parts, so called &lt;strong&gt;biomes&lt;&#x2F;strong&gt;. A biom is defined Java code. Let us take a look at a typical L-Shape:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;x
&lt;&#x2F;span&gt;&lt;span&gt;x
&lt;&#x2F;span&gt;&lt;span&gt;x x
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This L-Shape can be represented by a &lt;code&gt;byte&lt;&#x2F;code&gt; array:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;byte[] &lt;&#x2F;span&gt;&lt;span&gt;L_SHAPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You might notice that there is an extra entry in the array:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt; numberOfColumns &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;L_SHAPE[L_SHAPE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Basically we are telling our level generation to always consider the last entry in a byte array as information about the number of columns in this specific biom. This is all we need as input. We now have full control over which parts should get used to compose a level.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;biom-conversion&quot;&gt;Biom Conversion&lt;&#x2F;h1&gt;
&lt;p&gt;We need to prepare the input data (byte arrays) into a format the algorithm understands. This format is a so called &lt;code&gt;Biom&lt;&#x2F;code&gt; class with the following properties:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;byte[][] data&lt;&#x2F;code&gt; the biom as a 2-dimensional byte array (without metadata)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;int startX&lt;&#x2F;code&gt; the x index on the biom where the player could possibly start&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;int startY&lt;&#x2F;code&gt; the y index on the biom where the player could possibly start&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;int endX&lt;&#x2F;code&gt; the x index on the biom where the player could leave&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;int endY&lt;&#x2F;code&gt; the y index on the biom where the player could leave&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;int length&lt;&#x2F;code&gt; the number of cells inside a biom&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;int width&lt;&#x2F;code&gt; the width of a biom (number of cells)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;int height&lt;&#x2F;code&gt; the height of a biom (number of cells)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We now call a so called &lt;code&gt;BiomFactory&lt;&#x2F;code&gt; which creates a Biom object for us:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;Biom biom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; biomFactory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;L_SHAPE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you are interested in how this factory works internally &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitbrain&#x2F;mindmazer&#x2F;blob&#x2F;master&#x2F;core&#x2F;src&#x2F;de&#x2F;bitbrain&#x2F;mindmazer&#x2F;levelgen&#x2F;BiomFactory.java&quot;&gt;check out the code on Github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Why I still use Java for gamedev</title>
        <published>2017-08-17T10:00:00+00:00</published>
        <updated>2017-08-17T10:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bitbra.in/blog/why-i-still-use-java-for-gamedev/"/>
        <id>https://bitbra.in/blog/why-i-still-use-java-for-gamedev/</id>
        
        <content type="html" xml:base="https://bitbra.in/blog/why-i-still-use-java-for-gamedev/">&lt;p&gt;There is an technology, running on billions of devices every single day: Java.
Many developers (beardy hipsters) claim this technology belongs to the past, game engines like &lt;a href=&quot;https:&#x2F;&#x2F;unity3d.com&#x2F;&quot;&gt;Unity&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.unrealengine.com&#x2F;en-US&#x2F;what-is-unreal-engine-4&quot;&gt;Unreal Engine&lt;&#x2F;a&gt; are the future! Still, there is one man who hasn&#x27;t lost hope. Every single day he is building real games, not written in C# or Javascript. Not even Python or scientific C++. He is just using &lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&#x2F;en&#x2F;&quot;&gt;Java&lt;&#x2F;a&gt;. And this person is me.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;unreal-engine-room.webp&quot; alt=&quot;unreal-engine&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This picture isn&#x27;t showing my living room. This is Unreal Engine. Playable in VR. With 60fps at 4K resolution! Awesome, right?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-simple-alternative&quot;&gt;The simple alternative&lt;&#x2F;h2&gt;
&lt;p&gt;Unfortunately I didn&#x27;t create this. But hey, I can show you something amazing I did back then, in Java:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;example-game.webp&quot; alt=&quot;example-game&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Okay, I get you. Why am I doing this to myself? Why not just using a game engine like everyone else? It would have so many advantages to use any game engine of my choice compared to this ancient crap I am doing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;complete 2D&#x2F;3D editors for modeling&lt;&#x2F;li&gt;
&lt;li&gt;inbuilt physics, lighting and rainbow machine 🌈&lt;&#x2F;li&gt;
&lt;li&gt;amazing graphics, shader editors&lt;&#x2F;li&gt;
&lt;li&gt;almost no programming skillz required! Just drag and drop all your stuff!&lt;&#x2F;li&gt;
&lt;li&gt;and much more...&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Well, the answer is quite simple: I like to remind myself everyday where I started. My first game was written in &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Delphi_(programming_language)&quot;&gt;Delphi Pascal&lt;&#x2F;a&gt;. Back then I even didn&#x27;t know much about &lt;a href=&quot;http:&#x2F;&#x2F;searchmicroservices.techtarget.com&#x2F;definition&#x2F;object-oriented-programming-OOP&quot;&gt;OOP&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;sourcemaking.com&#x2F;design_patterns&quot;&gt;Design Patterns&lt;&#x2F;a&gt;. The only thing I cared about was moving pixels on the screen. It was truly inspiring and it didn&#x27;t change, even eight years later.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started-with-gamedev&quot;&gt;Getting started with gamedev&lt;&#x2F;h2&gt;
&lt;p&gt;Many games have been completed by now and the majority of those games is written in &quot;pure&quot; Java. Not exactly pure Java, I am using libraries to access &lt;a href=&quot;https:&#x2F;&#x2F;www.opengl.org&#x2F;&quot;&gt;OpenGL&lt;&#x2F;a&gt; but generally I can say that most games are 100% written by hand, without an actual game engine or predefined templating.&lt;&#x2F;p&gt;
&lt;p&gt;How do I do this? To make a game in Java you basically need three things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Java skills&lt;&#x2F;li&gt;
&lt;li&gt;Basic understanding of math (ideally vectors, functions and matrices)&lt;&#x2F;li&gt;
&lt;li&gt;Know how to set&#x2F;move pixels on the screen and how to handle input&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Point 1 and 2 are straight-forward: if you know basically how Java works you can write programms which do stuff for you:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span&gt;HelloWorld &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;public static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; args[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ea9433;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;hey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;)) {
&lt;&#x2F;span&gt;&lt;span&gt;      System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;Hello World!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4ebc6b;&quot;&gt;You didn&amp;#39;t greet me! WOW!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In addition you need to know math. For example you could write an immutable &lt;a href=&quot;http:&#x2F;&#x2F;www.bbc.co.uk&#x2F;education&#x2F;guides&#x2F;zxd26sg&#x2F;revision&quot;&gt;vector&lt;&#x2F;a&gt; in Java with basic addition and subtraction functionality:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#090a0c;color:#dae4ed;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span&gt;Vector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;private final float &lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span&gt;Vector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;plus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Vector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;other&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;return new &lt;&#x2F;span&gt;&lt;span&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; other&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; other&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span&gt;Vector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;minus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Vector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;other&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5981f5;&quot;&gt;return new &lt;&#x2F;span&gt;&lt;span&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; other&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; other&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b7c3ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can do that with many different concepts and in the end you have a small library to implement math into your game. For example, turning around a player or calculating the distance between two game objects can be simply done by using vectors.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;giving-birth-to-your-game&quot;&gt;Giving birth to your game&lt;&#x2F;h2&gt;
&lt;p&gt;What about moving pixels on the screen? Java already has libraries like &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Swing_(Java)&quot;&gt;Swing&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;JavaFX&quot;&gt;JavaFX&lt;&#x2F;a&gt; and I could have easily used that to write games. It seems crazy to go down the Java path for game development but I am not completely stupid. All gamers have powerful graphics cards and it would be absolutely mental not to use them. These GUI libraries rely on Software Rendering by default, which means the CPU does all the work. So we need a better solution if we want to make a highly performing 3D shooter or the next WoW.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Miguel, why not using an Engine then?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Beeep, wrong question! Why bothering with a complex game engine when you can just include a small library which provides all those features for you?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;complete 2D&#x2F;3D editors for modeling&lt;&#x2F;li&gt;
&lt;li&gt;inbuilt physics, lighting and rainbow machine 🌈&lt;&#x2F;li&gt;
&lt;li&gt;amazing graphics, shaders&lt;&#x2F;li&gt;
&lt;li&gt;and much more...&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Sounds familiar? I&#x27;ll present to you &lt;a href=&quot;https:&#x2F;&#x2F;libgdx.badlogicgames.com&#x2F;&quot;&gt;libgdx&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;libgdx-icon.webp&quot; alt=&quot;libgdx-icon&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Yes, this library let me do all this fancy game engine stuff, but in Java! Everything rendered on my &lt;strong&gt;GTX 93849 Extreme Ultra HD Power 5000&lt;&#x2F;strong&gt; Graphics Card (without FPS limit an initial empty game gets ~15000fps, whoops). Nowadays I takes me 30 minutes to create a simple 3D Snake game in Java. In under 200 lines of code. Without touching any game engine. You&#x27;re not believing me? Then you have to wait for a next blog article.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-libgdx&quot;&gt;Why libgdx?&lt;&#x2F;h2&gt;
&lt;p&gt;This library allows me to combine it with my Java knowledge to write games the same way as you would write a small Swing application. Furthermore it is cross-plattform compatible, so the Java game runs &lt;a href=&quot;http:&#x2F;&#x2F;libgdx.badlogicgames.com&#x2F;features.html&quot;&gt;on Windows, MacOS, Linux, Android and even iOS&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Moreover I really love Java. During the past years I worked with several programming languages, frameworks and libraries, however Java always was the easiest and simplest to work with. For example, C# is great as well. It even has features like &lt;a href=&quot;https:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-gb&#x2F;library&#x2F;aa288459(v=vs.71).aspx&quot;&gt;Delegates&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;x9fsa0sw(v=vs.100).aspx&quot;&gt;Properties&lt;&#x2F;a&gt; which I really miss in Java. Also C++ is great to work with. Compile natively and have very low overhead, compared to Java. A simple SDL game written in C++ (proc-gen, without assets) can be around ~40kb, while the same game in Java is easily 8MB in size (all required .jar libraries need to get packed in the fat-jar). That&#x27;s an increase of 2000%. Still, we&#x27;re living in 2017 and file size doesn&#x27;t matter anymore (mostly). In terms of resource management &lt;a href=&quot;https:&#x2F;&#x2F;benchmarksgame.alioth.debian.org&#x2F;u64q&#x2F;compare.php?lang=java&amp;amp;lang2=gpp&quot;&gt;Java doesn&#x27;t do that well compared to C++&lt;&#x2F;a&gt; but as I said, our computers are monster machines, we just don&#x27;t care anymore.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conservative-and-old-fashioned&quot;&gt;Conservative and old-fashioned?&lt;&#x2F;h2&gt;
&lt;p&gt;Do I enjoy Java too much? Probably yes. Could I save lot of time when writing larger games by using an actual game engine? Maybe. Do I want to learn various game engines by heart? Definitely. I am not saying that I blindly refuse to do something different than Java. Regardless, it&#x27;s the most fun way to do what I love.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do what you want independent of technology, library or game engine. It does&#x27;t matter how you do it. It doesn&#x27;t matter how long it takes to get there. The only thing which matters is that you are doing what you love.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;- Miguel&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Terminal Setup on MacOS</title>
        <published>2017-08-16T10:00:00+00:00</published>
        <updated>2017-08-16T10:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bitbra.in/blog/terminal-setup-on-macos/"/>
        <id>https://bitbra.in/blog/terminal-setup-on-macos/</id>
        
        <content type="html" xml:base="https://bitbra.in/blog/terminal-setup-on-macos/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;macos-terminal-example.webp&quot; alt=&quot;terminal-example&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Today I would like to share with you my current terminal setup. It basically consists of the following parts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.iterm2.com&quot;&gt;iTerm2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.zsh.org&quot;&gt;zsh&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;ohmyz.sh&quot;&gt;oh-my-zsh&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cloud.githubusercontent.com&#x2F;assets&#x2F;2618447&#x2F;6316762&#x2F;51f34624-ba00-11e4-948a-6ac65a49f8c5.png&quot;&gt;sorin zsh theme&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;deepsweet&#x2F;Monokai-Soda-iTerm&quot;&gt;Monokai Soda&lt;&#x2F;a&gt; (modified)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-terminal&quot;&gt;The Terminal&lt;&#x2F;h2&gt;
&lt;p&gt;The default terminal app on MacOS is definitely lacking of functionality. As &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@xanderdunn&quot;&gt;xanderdunn&lt;&#x2F;a&gt; has &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@xanderdunn&#x2F;iterm2-vs-terminal-c06976f106ef&quot;&gt;written on Medium&lt;&#x2F;a&gt;, iTerm2 has huge advantages compared to the default terminal:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s a lot more customizable. For example, I can tell it to shut up and never show me warning dialogues when I’m closing a tab or quitting the app when there’s a running process. Customizability ends up being pretty important for serious developers who are always in the terminal.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Apart from customisation, iTerm2 allows me to split tabs vertically or horizontally on a native basis (different from &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;simme&#x2F;1297707&quot;&gt;tmux&lt;&#x2F;a&gt; where it is virtually implemented). With tmux we could achieve similar behavior, however it would take much longer to set it up and even then it would still not be natively implemented. As a Mac user I always strived for fast and easy setup. When I change my machine I do not want to spend weeks on customising my Terminal. iTerm2 has lots of inbuilt features which could only be added to the default terminal by using plugins.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-shell&quot;&gt;The Shell&lt;&#x2F;h2&gt;
&lt;p&gt;I used many shells such as &lt;a href=&quot;https:&#x2F;&#x2F;fishshell.com&#x2F;&quot;&gt;fish&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;MohamedAlaa&#x2F;2961058&quot;&gt;tmux&lt;&#x2F;a&gt;. After all this time I eventually sticked to zsh for different reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;ohmyz.sh&#x2F;community&quot;&gt;amazing community&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;lots of customizations&lt;&#x2F;li&gt;
&lt;li&gt;syntax highlighting&lt;&#x2F;li&gt;
&lt;li&gt;lots of available plugins&lt;&#x2F;li&gt;
&lt;li&gt;inline auto-suggestions&lt;&#x2F;li&gt;
&lt;li&gt;paginated completion&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To just list some of the great features.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-theme&quot;&gt;The Theme&lt;&#x2F;h2&gt;
&lt;p&gt;When I started programming I never thought about customising my terminal or favourite IDE. After many years of trying different things I started to like dark themes. It&#x27;s 2017 and there are thousands of different themes out there. My favourite is still &lt;a href=&quot;https:&#x2F;&#x2F;atom.io&#x2F;themes&#x2F;monokai&quot;&gt;Monokai&lt;&#x2F;a&gt;, presumably known from the &lt;a href=&quot;https:&#x2F;&#x2F;josephg.com&#x2F;blog&#x2F;electron-is-flash-for-the-desktop&quot;&gt;legendary RAM eating machine&lt;&#x2F;a&gt;, called &lt;a href=&quot;https:&#x2F;&#x2F;atom.io&quot;&gt;Atom&lt;&#x2F;a&gt;. Monokai has vibrant colours which help me to see things, even at night. It&#x27;s just preference but I really love vibrant colours (and Tron).&lt;&#x2F;p&gt;
&lt;p&gt;I use two different things for the appearance: the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;deepsweet&#x2F;Monokai-Soda-iTerm&quot;&gt;Monokai Soda&lt;&#x2F;a&gt; theme for colours and the &lt;a href=&quot;https:&#x2F;&#x2F;cloud.githubusercontent.com&#x2F;assets&#x2F;2618447&#x2F;6316762&#x2F;51f34624-ba00-11e4-948a-6ac65a49f8c5.png&quot;&gt;sorin zsh theme&lt;&#x2F;a&gt; theme for the terminal layout. Note that I made the colours of the Soda theme slightly brighter to have an increase in contrast.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I hope you like my setup. Happy coding!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>New blog</title>
        <published>2017-08-15T10:00:00+00:00</published>
        <updated>2017-08-15T10:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://bitbra.in/blog/new-blog/"/>
        <id>https://bitbra.in/blog/new-blog/</id>
        
        <content type="html" xml:base="https://bitbra.in/blog/new-blog/">&lt;p&gt;Laziness can be a disease. Unfortunately my brain decided to just stop writing blog articles about stuff I do. This does not mean that I ever stopped. Oh hell no, I even did too much since I last blogged about my life. Things changed drastically in the last 12 months: moving to Central London to work fulltime, having two cats as well as enjoying life more than ever.&lt;&#x2F;p&gt;
&lt;p&gt;But let&#x27;s not talk about boring stuff for now, what can you guys expect on here?&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s sum up some things I want to talk about in the next weeks and months:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Java&#x2F;Javascript&#x2F;Groovy&#x2F;&#x27;insert your favourite language here&#x27; tips and tricks!&lt;&#x2F;li&gt;
&lt;li&gt;Working with &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;&quot;&gt;AWS&lt;&#x2F;a&gt; and CIs like Jenkins, TravisCI or Bamboo&lt;&#x2F;li&gt;
&lt;li&gt;Motivation, Work&#x2F;Life Balance&lt;&#x2F;li&gt;
&lt;li&gt;gamedev!!!111 and pixelart&lt;&#x2F;li&gt;
&lt;li&gt;Gaming and Twitter drama&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Sounds interesting? Let&#x27;s see what the future holds. See you!&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
